// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace SRUNPE.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240301010910_001")]
    partial class _001
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AcudienteCandidatoEstudiante", b =>
                {
                    b.Property<Guid>("AcudienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidatoEstudianteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AcudienteId", "CandidatoEstudianteId");

                    b.HasIndex("CandidatoEstudianteId");

                    b.ToTable("AcudienteCandidatoEstudiante");
                });

            modelBuilder.Entity("CursoDocente", b =>
                {
                    b.Property<Guid>("CursosCursoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocentesDocenteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CursosCursoId", "DocentesDocenteId");

                    b.HasIndex("DocentesDocenteId");

                    b.ToTable("CursoDocente");
                });

            modelBuilder.Entity("DocenteMateria", b =>
                {
                    b.Property<Guid>("DocenteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MateriaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DocenteId", "MateriaId");

                    b.HasIndex("MateriaId");

                    b.ToTable("DocenteMateria");
                });

            modelBuilder.Entity("Entities.Models.D_Acudiente.Acudiente", b =>
                {
                    b.Property<Guid>("AcudienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Apellidos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorreoElectronico")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Edad")
                        .HasColumnType("int");

                    b.Property<string>("EstadoCivil")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroIdentificacion")
                        .HasColumnType("int");

                    b.Property<long>("NumeroIdentificacionEstudiante")
                        .HasColumnType("bigint");

                    b.Property<string>("Ocupacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelacionConEstudiante")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcudienteId");

                    b.ToTable("Acudientes");

                    b.HasData(
                        new
                        {
                            AcudienteId = new Guid("086077a9-adbb-4e30-9199-677c82377ddc"),
                            Apellidos = "Perez",
                            CorreoElectronico = "juan.perez@example.com",
                            Edad = 45,
                            EstadoCivil = "Casado",
                            FechaRegistro = new DateTime(2024, 2, 29, 20, 9, 10, 786, DateTimeKind.Local).AddTicks(8836),
                            Nombres = "Juan",
                            NumeroIdentificacion = 123456789,
                            NumeroIdentificacionEstudiante = 987654321L,
                            Ocupacion = "Ingeniero",
                            RelacionConEstudiante = "Padre"
                        },
                        new
                        {
                            AcudienteId = new Guid("2a971859-2b7e-4970-9a18-2d767541b0f7"),
                            Apellidos = "Lopez",
                            CorreoElectronico = "maria.lopez@example.com",
                            Edad = 40,
                            EstadoCivil = "Casada",
                            FechaRegistro = new DateTime(2024, 2, 29, 20, 9, 10, 786, DateTimeKind.Local).AddTicks(8850),
                            Nombres = "Maria",
                            NumeroIdentificacion = 987654321,
                            NumeroIdentificacionEstudiante = 123456789L,
                            Ocupacion = "Abogada",
                            RelacionConEstudiante = "Madre"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Acudiente.DireccionAcudiente", b =>
                {
                    b.Property<Guid>("DireccionAcudienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Calle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CiudadLocalidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoPostal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColoniaBarrio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoProvincia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DireccionAcudienteId");

                    b.ToTable("DireccionAcudiente");

                    b.HasData(
                        new
                        {
                            DireccionAcudienteId = new Guid("f995a7c7-2741-4509-b862-418e1d60475c"),
                            Calle = "Calle 72",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110231",
                            ColoniaBarrio = "Chapinero",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("dea761e2-63bc-4645-a519-09a7a0eddfae"),
                            Calle = "Calle 72",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110231",
                            ColoniaBarrio = "Chapinero",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("29a8fb1e-9c70-4abf-960b-9dd1110f682d"),
                            Calle = "Carrera 10",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110321",
                            ColoniaBarrio = "La Candelaria",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("71bc9f88-4511-44d9-ba03-c61ed8b81381"),
                            Calle = "Avenida Boyacá",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110511",
                            ColoniaBarrio = "Fontibón",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("dc9ad6f9-d8f3-4272-a3ad-c3d212371d1e"),
                            Calle = "Calle 80",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110841",
                            ColoniaBarrio = "Engativá",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("bf279da9-8ab3-4e7e-a289-638f71be94f0"),
                            Calle = "Carrera 7",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110171",
                            ColoniaBarrio = "Usaquén",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("3814bd59-70ca-42b4-91d2-19d95fd372ef"),
                            Calle = "Avenida 68",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110841",
                            ColoniaBarrio = "Kennedy",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Acudiente.TelefonoAcudiente", b =>
                {
                    b.Property<Guid>("TelefonoAcudienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AcudienteId")
                        .HasColumnType("int");

                    b.Property<string>("Indicativo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TelefonoAcudienteId");

                    b.ToTable("TelefonoAcudiente");

                    b.HasData(
                        new
                        {
                            TelefonoAcudienteId = new Guid("f78d8c36-d22c-4f6d-90ac-3d3fcb4e8bb0"),
                            AcudienteId = 1,
                            Indicativo = "+1",
                            Numero = -4135,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("535e6d4d-49c4-42dc-aa06-e2b907e1216a"),
                            AcudienteId = 2,
                            Indicativo = "+1",
                            Numero = -6975,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("04eb3375-fb7c-498d-970c-2b5c9484a78c"),
                            AcudienteId = 3,
                            Indicativo = "+1",
                            Numero = -5357,
                            Tipo = "Fijo"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("1e81f2cb-bb02-464b-a23b-1355ab323b0c"),
                            AcudienteId = 4,
                            Indicativo = "+1",
                            Numero = -5753,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("f9e50c99-987e-4d61-be9a-57dc6bbbd3ea"),
                            AcudienteId = 5,
                            Indicativo = "+1",
                            Numero = 911,
                            Tipo = "Emergencia"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("cb5b6f57-7061-413e-9a2a-d3237eac7c03"),
                            AcudienteId = 1,
                            Indicativo = "+1",
                            Numero = -667,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("db4f49ad-b811-4522-b502-64ca9c6d629b"),
                            AcudienteId = 2,
                            Indicativo = "+1",
                            Numero = -1889,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("f429c2a7-39ea-4fff-b1a4-7d2cc8633e28"),
                            AcudienteId = 3,
                            Indicativo = "+1",
                            Numero = -3111,
                            Tipo = "Fijo"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("6c0a90b3-895c-4413-96ca-beff48fafbed"),
                            AcudienteId = 4,
                            Indicativo = "+1",
                            Numero = -4333,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("12129549-c00c-4e56-afff-4419349f34ec"),
                            AcudienteId = 5,
                            Indicativo = "+1",
                            Numero = -5555,
                            Tipo = "Emergencia"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_DepartamentoAcademico.Aulas", b =>
                {
                    b.Property<Guid>("AulaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacidad")
                        .HasColumnType("int");

                    b.Property<Guid>("DocenteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EstadoAula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HorarioDisponibilidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreNumero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotasAdicionales")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrosIncidentesProblemas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoAula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UltimaActualizacion")
                        .HasColumnType("datetime2");

                    b.HasKey("AulaId");

                    b.ToTable("Aulas");

                    b.HasData(
                        new
                        {
                            AulaId = new Guid("bd249220-eec2-4bbd-c57e-8619cb666ece"),
                            Capacidad = 50,
                            DocenteId = new Guid("a007fb2e-89c1-433a-609b-81a34b070e20"),
                            EstadoAula = "Disponible",
                            HorarioDisponibilidad = "Lunes a Viernes, 08:00 AM - 06:00 PM",
                            NombreNumero = "Aula 101",
                            NotasAdicionales = "Equipada con proyector",
                            RegistrosIncidentesProblemas = "Ninguno",
                            TipoAula = "Salón de Clases",
                            Ubicacion = "Edificio Principal",
                            UltimaActualizacion = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AulaId = new Guid("53c29e9a-f7b8-433b-983f-a85b823c4733"),
                            Capacidad = 30,
                            DocenteId = new Guid("57aa9a84-70b2-4e68-235d-987650f3b246"),
                            EstadoAula = "Ocupado",
                            HorarioDisponibilidad = "Lunes a Viernes, 10:00 AM - 05:00 PM",
                            NombreNumero = "Aula 102",
                            NotasAdicionales = "Equipado con computadoras de última generación",
                            RegistrosIncidentesProblemas = "Reporte de fallo en una computadora",
                            TipoAula = "Laboratorio de Informática",
                            Ubicacion = "Edificio de Ciencias",
                            UltimaActualizacion = new DateTime(2023, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Entities.Models.D_DepartamentoAcademico.Cursos", b =>
                {
                    b.Property<Guid>("CursoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CupoActual")
                        .HasColumnType("int");

                    b.Property<int>("CupoMaximo")
                        .HasColumnType("int");

                    b.Property<string>("DepartamentoAcademico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaFinalizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaLimiteInscripcion")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetodosEnsenanza")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modalidad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nivel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CursoId");

                    b.ToTable("Cursos");

                    b.HasData(
                        new
                        {
                            CursoId = new Guid("f37f578c-0492-4968-984c-ccab87281d0a"),
                            CupoActual = 0,
                            CupoMaximo = 0,
                            DepartamentoAcademico = "Ciencias de la Computación",
                            Descripcion = "Introducción a la Programación",
                            FechaFinalizacion = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicio = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaLimiteInscripcion = new DateTime(2023, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MetodosEnsenanza = "Clases magistrales, laboratorios prácticos",
                            Nivel = "Primer Semestre"
                        },
                        new
                        {
                            CursoId = new Guid("59c33cf4-f631-441e-a194-9ceaf2eaaf79"),
                            CupoActual = 0,
                            CupoMaximo = 0,
                            DepartamentoAcademico = "English Department",
                            Descripcion = "Advanced English Composition",
                            FechaFinalizacion = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicio = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaLimiteInscripcion = new DateTime(2023, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MetodosEnsenanza = "Lectures, writing assignments, group discussions",
                            Nivel = "Second Semester"
                        },
                        new
                        {
                            CursoId = new Guid("1c8bea41-730b-438c-8582-728b36b3292e"),
                            CupoActual = 0,
                            CupoMaximo = 0,
                            DepartamentoAcademico = "Mathematics Department",
                            Descripcion = "Advanced Calculus",
                            FechaFinalizacion = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicio = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaLimiteInscripcion = new DateTime(2023, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MetodosEnsenanza = "Lectures, problem sets, exams",
                            Nivel = "Third Semester"
                        },
                        new
                        {
                            CursoId = new Guid("9d46c651-eec2-45d2-86c5-0a9b70f48802"),
                            CupoActual = 0,
                            CupoMaximo = 0,
                            DepartamentoAcademico = "Chemistry Department",
                            Descripcion = "Organic Chemistry",
                            FechaFinalizacion = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicio = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaLimiteInscripcion = new DateTime(2023, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MetodosEnsenanza = "Lectures, laboratory experiments",
                            Nivel = "Second Semester"
                        },
                        new
                        {
                            CursoId = new Guid("f33e1ae6-4359-4801-b84b-7c2e285e7b2c"),
                            CupoActual = 0,
                            CupoMaximo = 0,
                            DepartamentoAcademico = "History Department",
                            Descripcion = "Introduction to History",
                            FechaFinalizacion = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicio = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaLimiteInscripcion = new DateTime(2023, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MetodosEnsenanza = "Lectures, discussions, research papers",
                            Nivel = "First Semester"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_DepartamentoAcademico.Horarios", b =>
                {
                    b.Property<Guid>("HorarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DiaSemana")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DocenteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DuracionClaseMinutos")
                        .HasColumnType("int");

                    b.Property<string>("EstadoHorario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaFinClases")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicioClases")
                        .HasColumnType("datetime2");

                    b.Property<string>("GrupoSeccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("HoraFin")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HoraInicio")
                        .HasColumnType("time");

                    b.Property<string>("NotificacionCambioHorario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeriodoAcademico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HorarioId");

                    b.ToTable("Horarios");

                    b.HasData(
                        new
                        {
                            HorarioId = new Guid("17793c65-0075-4b33-f071-f84a0774be25"),
                            DiaSemana = "Lunes",
                            DocenteId = new Guid("a007fb2e-89c1-433a-609b-81a34b070e20"),
                            DuracionClaseMinutos = 120,
                            EstadoHorario = "Activo",
                            FechaFinClases = new DateTime(2023, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicioClases = new DateTime(2023, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrupoSeccion = "Grupo A",
                            HoraFin = new TimeSpan(0, 11, 0, 0, 0),
                            HoraInicio = new TimeSpan(0, 9, 0, 0, 0),
                            NotificacionCambioHorario = "No",
                            PeriodoAcademico = "Semestre de Otoño"
                        },
                        new
                        {
                            HorarioId = new Guid("75acf5e1-58d1-43e5-2385-76f0a8f0f464"),
                            DiaSemana = "Martes",
                            DocenteId = new Guid("57aa9a84-70b2-4e68-235d-987650f3b246"),
                            DuracionClaseMinutos = 120,
                            EstadoHorario = "Activo",
                            FechaFinClases = new DateTime(2023, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicioClases = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrupoSeccion = "Grupo B",
                            HoraFin = new TimeSpan(0, 16, 0, 0, 0),
                            HoraInicio = new TimeSpan(0, 14, 0, 0, 0),
                            NotificacionCambioHorario = "Sí",
                            PeriodoAcademico = "Semestre de Primavera"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_DepartamentoAcademico.Materias", b =>
                {
                    b.Property<Guid>("MateriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DepartamentoAcademico")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GrupoSeccionMateria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetodosEnsenanza")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModalidadEnsenanza")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nivel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotasAdicionales")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MateriaId");

                    b.ToTable("Materias");

                    b.HasData(
                        new
                        {
                            MateriaId = new Guid("e9961937-00de-47d5-86e7-429cc4eb793f"),
                            DepartamentoAcademico = "Departamento de Matemáticas",
                            Descripcion = "Curso de Matemáticas Avanzadas",
                            Estado = "En progreso",
                            GrupoSeccionMateria = "Grupo A",
                            MetodosEnsenanza = "Clases teóricas y prácticas",
                            ModalidadEnsenanza = "Presencial",
                            Nivel = "Avanzado",
                            Nombre = "Matemáticas",
                            NotasAdicionales = "Se requiere calculadora científica."
                        },
                        new
                        {
                            MateriaId = new Guid("a64a2af5-758f-4b9f-9e47-7cbc86842b1d"),
                            DepartamentoAcademico = "Departamento de Historia",
                            Descripcion = "Curso de Historia Mundial",
                            Estado = "Inscripciones abiertas",
                            GrupoSeccionMateria = "Grupo B",
                            MetodosEnsenanza = "Conferencias y debates",
                            ModalidadEnsenanza = "Presencial",
                            Nivel = "Intermedio",
                            Nombre = "Historia",
                            NotasAdicionales = "Recomendado para estudiantes de Historia."
                        },
                        new
                        {
                            MateriaId = new Guid("01f0ef83-689c-43bc-8a66-c0e039428375"),
                            DepartamentoAcademico = "Departamento de Informática",
                            Descripcion = "Curso de Ciencias de la Computación",
                            Estado = "En progreso",
                            GrupoSeccionMateria = "Grupo C",
                            MetodosEnsenanza = "Clases virtuales y proyectos prácticos",
                            ModalidadEnsenanza = "En línea",
                            Nivel = "Avanzado",
                            Nombre = "Ciencias de la Computación",
                            NotasAdicionales = "Requiere acceso a una computadora."
                        },
                        new
                        {
                            MateriaId = new Guid("cc64e5d8-d6d3-4d57-8ad5-6e988228417c"),
                            DepartamentoAcademico = "Departamento de Literatura",
                            Descripcion = "Curso de Literatura Universal",
                            Estado = "Inscripciones abiertas",
                            GrupoSeccionMateria = "Grupo D",
                            MetodosEnsenanza = "Lecturas y discusiones literarias",
                            ModalidadEnsenanza = "Presencial",
                            Nivel = "Intermedio",
                            Nombre = "Literatura",
                            NotasAdicionales = "Apto para amantes de la lectura."
                        },
                        new
                        {
                            MateriaId = new Guid("fd133c57-71f1-4134-8808-831190e27019"),
                            DepartamentoAcademico = "Departamento de Física",
                            Descripcion = "Curso de Física Avanzada",
                            Estado = "Completo",
                            GrupoSeccionMateria = "Grupo E",
                            MetodosEnsenanza = "Experimentos y clases teóricas",
                            ModalidadEnsenanza = "Presencial",
                            Nivel = "Avanzado",
                            Nombre = "Física",
                            NotasAdicionales = "Requiere conocimientos previos de física."
                        },
                        new
                        {
                            MateriaId = new Guid("77596722-b248-49ea-9914-8d98ba49dc8d"),
                            DepartamentoAcademico = "Departamento de Economía",
                            Descripcion = "Curso de Economía Moderna",
                            Estado = "En progreso",
                            GrupoSeccionMateria = "Grupo F",
                            MetodosEnsenanza = "Clases virtuales y análisis económico",
                            ModalidadEnsenanza = "En línea",
                            Nivel = "Intermedio",
                            Nombre = "Economía",
                            NotasAdicionales = "Abordaremos temas financieros actuales."
                        },
                        new
                        {
                            MateriaId = new Guid("ed535f81-5ed8-4a82-8ff0-a2766ac501a3"),
                            DepartamentoAcademico = "Departamento de Arte",
                            Descripcion = "Curso de Arte Contemporáneo",
                            Estado = "Inscripciones abiertas",
                            GrupoSeccionMateria = "Grupo G",
                            MetodosEnsenanza = "Prácticas artísticas y exposiciones",
                            ModalidadEnsenanza = "Presencial",
                            Nivel = "Intermedio",
                            Nombre = "Arte",
                            NotasAdicionales = "No se requiere experiencia previa en arte."
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Docente.Docente", b =>
                {
                    b.Property<Guid>("DocenteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AulaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ComentariosNotas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorreoElectronico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CursosAsignados")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoLaboral")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaContratacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HorarioClases")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("HorarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NivelExperiencia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroIdentificacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroTelefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocenteId");

                    b.HasIndex("AulaId")
                        .IsUnique();

                    b.HasIndex("HorarioId")
                        .IsUnique();

                    b.ToTable("Docentes");

                    b.HasData(
                        new
                        {
                            DocenteId = new Guid("a007fb2e-89c1-433a-609b-81a34b070e20"),
                            AulaId = new Guid("bd249220-eec2-4bbd-c57e-8619cb666ece"),
                            ComentariosNotas = "Excellent teacher with great communication skills.",
                            CorreoElectronico = "john.smith@example.com",
                            CursosAsignados = "Mathematics, Physics",
                            Direccion = "123 Main Street, Cityville",
                            EstadoLaboral = "Active",
                            FechaContratacion = new DateTime(2010, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaNacimiento = new DateTime(1980, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genero = "Male",
                            HorarioClases = "Mon-Fri: 8 am - 4 pm",
                            HorarioId = new Guid("17793c65-0075-4b33-f071-f84a0774be25"),
                            NivelExperiencia = "Senior",
                            Nombre = "John Smith",
                            NumeroIdentificacion = "D123456789",
                            NumeroTelefono = "+1 (555) 123-4567"
                        },
                        new
                        {
                            DocenteId = new Guid("57aa9a84-70b2-4e68-235d-987650f3b246"),
                            AulaId = new Guid("53c29e9a-f7b8-433b-983f-a85b823c4733"),
                            ComentariosNotas = "Passionate about her subject and dedicated to student success.",
                            CorreoElectronico = "alice.johnson@example.com",
                            CursosAsignados = "Literature, History",
                            Direccion = "456 Oak Avenue, Townsville",
                            EstadoLaboral = "Active",
                            FechaContratacion = new DateTime(2015, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaNacimiento = new DateTime(1985, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genero = "Female",
                            HorarioClases = "Tue-Thu: 10 am - 6 pm",
                            HorarioId = new Guid("75acf5e1-58d1-43e5-2385-76f0a8f0f464"),
                            NivelExperiencia = "Intermediate",
                            Nombre = "Alice Johnson",
                            NumeroIdentificacion = "D987654321",
                            NumeroTelefono = "+1 (555) 987-6543"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Estudiante.CandidatoEstudiante", b =>
                {
                    b.Property<Guid>("CandidatoEstudianteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdjuntarDocumentos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("NumeroContacto")
                        .HasColumnType("bigint");

                    b.Property<long>("NumeroDocumento")
                        .HasColumnType("bigint");

                    b.Property<long>("NumeroIdentificacionAcudiente")
                        .HasColumnType("bigint");

                    b.Property<string>("TipoDocumento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoPersona")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CandidatoEstudianteId");

                    b.ToTable("CandidatoEstudiantes");

                    b.HasData(
                        new
                        {
                            CandidatoEstudianteId = new Guid("61f278b8-f98a-4d6d-8c19-a00f46ebf94c"),
                            AdjuntarDocumentos = "Documentos adjuntos",
                            Apellido = "Gomez",
                            Direccion = "Calle 123",
                            FechaNacimiento = new DateTime(2000, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genero = "Masculino",
                            Nombre = "Pedro",
                            NumeroContacto = 321L,
                            NumeroDocumento = 123L,
                            NumeroIdentificacionAcudiente = 123456789L,
                            TipoDocumento = "CC",
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("0b8671f5-85b0-4d18-93c5-51dea38c0b98"),
                            AdjuntarDocumentos = "Documentos adjuntos",
                            Apellido = "Rodriguez",
                            Direccion = "Carrera 456",
                            FechaNacimiento = new DateTime(1998, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genero = "Femenino",
                            Nombre = "Ana",
                            NumeroContacto = 654L,
                            NumeroDocumento = 456L,
                            NumeroIdentificacionAcudiente = 987654321L,
                            TipoDocumento = "CC",
                            TipoPersona = "Estudiante"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Estudiante.Cupo", b =>
                {
                    b.Property<Guid>("CupoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CantidadDisponible")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duracion")
                        .HasColumnType("time");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ubicacion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CupoId");

                    b.ToTable("Cupo");

                    b.HasData(
                        new
                        {
                            CupoId = new Guid("dcd86f9e-ef33-401b-9829-402e7c2e8ae3"),
                            CantidadDisponible = 10,
                            Descripcion = "Cupo para el evento principal",
                            Duracion = new TimeSpan(0, 2, 0, 0, 0),
                            Estado = true,
                            FechaFin = new DateTime(2024, 3, 29, 20, 9, 10, 786, DateTimeKind.Local).AddTicks(9800),
                            FechaInicio = new DateTime(2024, 2, 29, 20, 9, 10, 786, DateTimeKind.Local).AddTicks(9799),
                            Ubicacion = "Salón principal"
                        },
                        new
                        {
                            CupoId = new Guid("1390799d-1596-4dcc-993f-0e833c65642c"),
                            CantidadDisponible = 5,
                            Descripcion = "Cupo para el taller de programación",
                            Duracion = new TimeSpan(0, 3, 0, 0, 0),
                            Estado = true,
                            FechaFin = new DateTime(2024, 4, 29, 20, 9, 10, 786, DateTimeKind.Local).AddTicks(9812),
                            FechaInicio = new DateTime(2024, 2, 29, 20, 9, 10, 786, DateTimeKind.Local).AddTicks(9812),
                            Ubicacion = "Aula 101"
                        },
                        new
                        {
                            CupoId = new Guid("4e63be20-70d1-4979-995b-f1925ee845d7"),
                            CantidadDisponible = 20,
                            Descripcion = "Cupo para el seminario de marketing",
                            Duracion = new TimeSpan(0, 4, 0, 0, 0),
                            Estado = true,
                            FechaFin = new DateTime(2024, 5, 29, 20, 9, 10, 786, DateTimeKind.Local).AddTicks(9815),
                            FechaInicio = new DateTime(2024, 2, 29, 20, 9, 10, 786, DateTimeKind.Local).AddTicks(9814),
                            Ubicacion = "Aula 102"
                        },
                        new
                        {
                            CupoId = new Guid("7683c24b-11ea-4e06-b004-5380d95ce3aa"),
                            CantidadDisponible = 15,
                            Descripcion = "Cupo para el curso de diseño gráfico",
                            Duracion = new TimeSpan(0, 2, 0, 0, 0),
                            Estado = true,
                            FechaFin = new DateTime(2024, 6, 29, 20, 9, 10, 786, DateTimeKind.Local).AddTicks(9819),
                            FechaInicio = new DateTime(2024, 2, 29, 20, 9, 10, 786, DateTimeKind.Local).AddTicks(9819),
                            Ubicacion = "Aula 103"
                        },
                        new
                        {
                            CupoId = new Guid("efd7fbf7-867b-41ba-847c-17015afcd019"),
                            CantidadDisponible = 30,
                            Descripcion = "Cupo para el evento de networking",
                            Duracion = new TimeSpan(0, 1, 0, 0, 0),
                            Estado = true,
                            FechaFin = new DateTime(2024, 7, 29, 20, 9, 10, 786, DateTimeKind.Local).AddTicks(9821),
                            FechaInicio = new DateTime(2024, 2, 29, 20, 9, 10, 786, DateTimeKind.Local).AddTicks(9821),
                            Ubicacion = "Aula 104"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Estudiante.EstudianteDocumentos", b =>
                {
                    b.Property<Guid>("EstudianteDocumentosId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreDocumento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroDocumento")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tamaño")
                        .HasColumnType("int");

                    b.Property<string>("TipoDocumento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ubicacion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EstudianteDocumentosId");

                    b.ToTable("EstudianteDocumentos");

                    b.HasData(
                        new
                        {
                            EstudianteDocumentosId = new Guid("6a30c846-4b9d-4cf5-bb17-051a3e9d1b72"),
                            Estado = true,
                            NombreDocumento = "Certificado de Nacimiento",
                            NumeroDocumento = 61464465,
                            Observaciones = "Ninguna",
                            Tamaño = 1024,
                            TipoDocumento = "Identificación",
                            Ubicacion = "ruta/al/documento1"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("2d54a999-187f-4a8c-99db-d17841e7938c"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 2, 29, 20, 9, 10, 786, DateTimeKind.Local).AddTicks(9060),
                            NombreDocumento = "Diploma",
                            NumeroDocumento = 987654,
                            Observaciones = "Logros académicos",
                            Tamaño = 2048,
                            TipoDocumento = "Educativo",
                            Ubicacion = "ruta/al/documento2"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("3e68515e-3a47-4a62-a8c7-9f12242d020e"),
                            Estado = false,
                            FechaActualizacion = new DateTime(2024, 2, 29, 20, 9, 10, 786, DateTimeKind.Local).AddTicks(9063),
                            NombreDocumento = "Certificado de Graduación",
                            NumeroDocumento = 123456,
                            Observaciones = "Graduación universitaria",
                            Tamaño = 1536,
                            TipoDocumento = "Educativo",
                            Ubicacion = "ruta/al/documento3"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("4a303cce-8c0e-4ae7-89c1-067d0b7741b6"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 2, 29, 20, 9, 10, 786, DateTimeKind.Local).AddTicks(9100),
                            NombreDocumento = "Certificado de Matrícula",
                            NumeroDocumento = 789012,
                            Observaciones = "Matrícula escolar",
                            Tamaño = 8192,
                            TipoDocumento = "Educativo",
                            Ubicacion = "ruta/al/documento4"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("5f78d0e1-579e-4dfc-82a1-92010b4191d3"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 2, 29, 20, 9, 10, 786, DateTimeKind.Local).AddTicks(9103),
                            NombreDocumento = "Cédula de Identidad",
                            NumeroDocumento = 555555,
                            Observaciones = "Documento oficial",
                            Tamaño = 4096,
                            TipoDocumento = "Identificación",
                            Ubicacion = "ruta/al/documento5"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("f38f6b1a-86e9-4d9d-8a7a-62f17e6f1ba2"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 2, 29, 20, 9, 10, 786, DateTimeKind.Local).AddTicks(9106),
                            NombreDocumento = "Carné de Estudiante",
                            NumeroDocumento = 7890123,
                            Observaciones = "Carné escolar",
                            Tamaño = 3072,
                            TipoDocumento = "Identificación",
                            Ubicacion = "ruta/al/documento6"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("7e15d9a4-98cb-4d14-9a35-862f8c202725"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 2, 29, 20, 9, 10, 786, DateTimeKind.Local).AddTicks(9109),
                            NombreDocumento = "Boleta de Calificaciones",
                            NumeroDocumento = 9876543,
                            Observaciones = "Registro académico",
                            Tamaño = 5120,
                            TipoDocumento = "Educativo",
                            Ubicacion = "ruta/al/documento7"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("8f4a67c2-fd5e-4316-8c50-7249f159d0f1"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 2, 29, 20, 9, 10, 786, DateTimeKind.Local).AddTicks(9114),
                            NombreDocumento = "Pasaporte",
                            NumeroDocumento = 1234567,
                            Observaciones = "Documento de viaje",
                            Tamaño = 4096,
                            TipoDocumento = "Identificación",
                            Ubicacion = "ruta/al/documento8"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("9b9d6d8f-72f0-4f0a-8e18-1e75b0182e3f"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 2, 29, 20, 9, 10, 786, DateTimeKind.Local).AddTicks(9117),
                            NombreDocumento = "Certificado Médico",
                            NumeroDocumento = 543210,
                            Observaciones = "Informe médico",
                            Tamaño = 2048,
                            TipoDocumento = "Salud",
                            Ubicacion = "ruta/al/documento9"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("10a5e754-1570-4be0-8650-2c53d7cfb4d3"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 2, 29, 20, 9, 10, 786, DateTimeKind.Local).AddTicks(9120),
                            NombreDocumento = "Fotografía del Estudiante",
                            NumeroDocumento = 1111111,
                            Observaciones = "Foto de perfil",
                            Tamaño = 1024,
                            TipoDocumento = "Identificación",
                            Ubicacion = "ruta/al/documento10"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Notas.Asistencia", b =>
                {
                    b.Property<int>("AsistenciaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AsistenciaId"));

                    b.Property<bool>("Asistio")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaHoraAsistencia")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreAsistente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoEvento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UbicacionEvento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AsistenciaId");

                    b.ToTable("Asistencia");

                    b.HasData(
                        new
                        {
                            AsistenciaId = 1,
                            Asistio = true,
                            FechaHoraAsistencia = new DateTime(2023, 10, 3, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "Juan Pérez",
                            Notas = "Asistió puntualmente.",
                            TipoEvento = "Conferencia",
                            UbicacionEvento = "Salón A"
                        },
                        new
                        {
                            AsistenciaId = 2,
                            Asistio = false,
                            FechaHoraAsistencia = new DateTime(2023, 10, 4, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "María Rodríguez",
                            Notas = "No pudo asistir debido a un compromiso previo.",
                            TipoEvento = "Reunión",
                            UbicacionEvento = "Sala de juntas"
                        },
                        new
                        {
                            AsistenciaId = 3,
                            Asistio = true,
                            FechaHoraAsistencia = new DateTime(2023, 10, 5, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "Carlos González",
                            Notas = "Participó activamente en el taller.",
                            TipoEvento = "Taller",
                            UbicacionEvento = "Aula 101"
                        },
                        new
                        {
                            AsistenciaId = 4,
                            Asistio = true,
                            FechaHoraAsistencia = new DateTime(2023, 10, 6, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "Ana López",
                            Notas = "Tomó notas detalladas durante la conferencia.",
                            TipoEvento = "Conferencia",
                            UbicacionEvento = "Salón B"
                        },
                        new
                        {
                            AsistenciaId = 5,
                            Asistio = true,
                            FechaHoraAsistencia = new DateTime(2023, 10, 7, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "Pedro Ramírez",
                            Notas = "Participó en la discusión de temas importantes.",
                            TipoEvento = "Reunión",
                            UbicacionEvento = "Sala de conferencias"
                        },
                        new
                        {
                            AsistenciaId = 6,
                            Asistio = true,
                            FechaHoraAsistencia = new DateTime(2023, 10, 8, 11, 45, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "Laura Martínez",
                            Notas = "Hizo preguntas interesantes durante el seminario.",
                            TipoEvento = "Seminario",
                            UbicacionEvento = "Auditorio"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Notas.Estadisticas", b =>
                {
                    b.Property<int>("EstadisticaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstadisticaId"));

                    b.Property<int>("AñoEscolar")
                        .HasColumnType("int");

                    b.Property<int>("CantidadExamenes")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Materia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("NotaMaxima")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NotaMinima")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NotaPromedio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PeriodoEscolar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EstadisticaId");

                    b.ToTable("Estadisticas");

                    b.HasData(
                        new
                        {
                            EstadisticaId = 1,
                            AñoEscolar = 2023,
                            CantidadExamenes = 5,
                            FechaRegistro = new DateTime(2024, 2, 29, 20, 9, 10, 787, DateTimeKind.Local).AddTicks(2040),
                            Materia = "Matemáticas",
                            NotaMaxima = 9.0m,
                            NotaMinima = 7.5m,
                            NotaPromedio = 8.5m,
                            PeriodoEscolar = "Primer Trimestre"
                        },
                        new
                        {
                            EstadisticaId = 2,
                            AñoEscolar = 2023,
                            CantidadExamenes = 4,
                            FechaRegistro = new DateTime(2024, 2, 29, 20, 9, 10, 787, DateTimeKind.Local).AddTicks(2044),
                            Materia = "Ciencias",
                            NotaMaxima = 8.5m,
                            NotaMinima = 6.5m,
                            NotaPromedio = 7.8m,
                            PeriodoEscolar = "Segundo Trimestre"
                        },
                        new
                        {
                            EstadisticaId = 3,
                            AñoEscolar = 2023,
                            CantidadExamenes = 3,
                            FechaRegistro = new DateTime(2024, 2, 29, 20, 9, 10, 787, DateTimeKind.Local).AddTicks(2046),
                            Materia = "Historia",
                            NotaMaxima = 9.5m,
                            NotaMinima = 8.5m,
                            NotaPromedio = 9.2m,
                            PeriodoEscolar = "Tercer Trimestre"
                        },
                        new
                        {
                            EstadisticaId = 4,
                            AñoEscolar = 2023,
                            CantidadExamenes = 5,
                            FechaRegistro = new DateTime(2024, 2, 29, 20, 9, 10, 787, DateTimeKind.Local).AddTicks(2048),
                            Materia = "Lenguaje",
                            NotaMaxima = 8.0m,
                            NotaMinima = 6.0m,
                            NotaPromedio = 7.2m,
                            PeriodoEscolar = "Primer Semestre"
                        },
                        new
                        {
                            EstadisticaId = 5,
                            AñoEscolar = 2023,
                            CantidadExamenes = 2,
                            FechaRegistro = new DateTime(2024, 2, 29, 20, 9, 10, 787, DateTimeKind.Local).AddTicks(2049),
                            Materia = "Arte",
                            NotaMaxima = 9.0m,
                            NotaMinima = 8.0m,
                            NotaPromedio = 8.7m,
                            PeriodoEscolar = "Segundo Semestre"
                        },
                        new
                        {
                            EstadisticaId = 6,
                            AñoEscolar = 2023,
                            CantidadExamenes = 3,
                            FechaRegistro = new DateTime(2024, 2, 29, 20, 9, 10, 787, DateTimeKind.Local).AddTicks(2051),
                            Materia = "Educación Física",
                            NotaMaxima = 10.0m,
                            NotaMinima = 9.0m,
                            NotaPromedio = 9.5m,
                            PeriodoEscolar = "Trimestre Extra"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Notas.Notas", b =>
                {
                    b.Property<int>("NotaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotaId"));

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Materia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Periodo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Valor")
                        .HasColumnType("int");

                    b.HasKey("NotaId");

                    b.ToTable("Notas");

                    b.HasData(
                        new
                        {
                            NotaId = 1,
                            FechaCreacion = new DateTime(2024, 2, 29, 20, 9, 10, 787, DateTimeKind.Local).AddTicks(2523),
                            Materia = "Matemáticas",
                            Periodo = "Primer Semestre",
                            Titulo = "Examen de Matemáticas",
                            Valor = 85
                        },
                        new
                        {
                            NotaId = 2,
                            FechaCreacion = new DateTime(2024, 2, 24, 20, 9, 10, 787, DateTimeKind.Local).AddTicks(2525),
                            Materia = "Ciencias",
                            Periodo = "Segundo Semestre",
                            Titulo = "Proyecto de Ciencias",
                            Valor = 92
                        },
                        new
                        {
                            NotaId = 3,
                            FechaCreacion = new DateTime(2024, 2, 19, 20, 9, 10, 787, DateTimeKind.Local).AddTicks(2527),
                            Materia = "Historia",
                            Periodo = "Primer Semestre",
                            Titulo = "Tarea de Historia",
                            Valor = 75
                        },
                        new
                        {
                            NotaId = 4,
                            FechaCreacion = new DateTime(2024, 2, 27, 20, 9, 10, 787, DateTimeKind.Local).AddTicks(2528),
                            Materia = "Español",
                            Periodo = "Segundo Semestre",
                            Titulo = "Presentación de Español",
                            Valor = 88
                        },
                        new
                        {
                            NotaId = 5,
                            FechaCreacion = new DateTime(2024, 2, 22, 20, 9, 10, 787, DateTimeKind.Local).AddTicks(2529),
                            Materia = "Inglés",
                            Periodo = "Primer Semestre",
                            Titulo = "Prueba de Inglés",
                            Valor = 95
                        });
                });

            modelBuilder.Entity("Entities.Models.Matricula", b =>
                {
                    b.Property<Guid>("MatriculaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoriaMatricula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comentarios")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoMatricula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaMatricula")
                        .HasColumnType("datetime2");

                    b.Property<string>("InformacionPlanEstudios")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PeriodoAcademico")
                        .HasColumnType("int");

                    b.Property<string>("RegistroCambios")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoMatricula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MatriculaId");

                    b.ToTable("Matricula");

                    b.HasData(
                        new
                        {
                            MatriculaId = new Guid("d50b5176-ba74-4736-af76-249266fc97f4"),
                            CategoriaMatricula = "Estudiante de Tiempo Completo",
                            Comentarios = "Comentario sobre la matrícula 1",
                            EstadoMatricula = "Activa",
                            FechaMatricula = new DateTime(2024, 2, 29, 20, 9, 10, 787, DateTimeKind.Local).AddTicks(529),
                            InformacionPlanEstudios = "Plan de estudios 2023",
                            PeriodoAcademico = 2024,
                            RegistroCambios = "Registro de cambios 1",
                            TipoMatricula = "Matrícula Regular"
                        },
                        new
                        {
                            MatriculaId = new Guid("4be06e6b-7969-4b85-88f2-5846e8b0fc7e"),
                            CategoriaMatricula = "Estudiante de Tiempo Parcial",
                            Comentarios = "Comentario sobre la matrícula 2",
                            EstadoMatricula = "Pendiente",
                            FechaMatricula = new DateTime(2024, 3, 29, 20, 9, 10, 787, DateTimeKind.Local).AddTicks(533),
                            InformacionPlanEstudios = "Plan de estudios 2023",
                            PeriodoAcademico = 2024,
                            RegistroCambios = "Registro de cambios 2",
                            TipoMatricula = "Matrícula Parcial"
                        },
                        new
                        {
                            MatriculaId = new Guid("fb862056-7cc6-46e5-854b-52d3c1d127c1"),
                            CategoriaMatricula = "Estudiante Internacional",
                            Comentarios = "Comentario sobre la matrícula 3",
                            EstadoMatricula = "Cancelada",
                            FechaMatricula = new DateTime(2024, 4, 29, 20, 9, 10, 787, DateTimeKind.Local).AddTicks(536),
                            InformacionPlanEstudios = "Plan de estudios 2023",
                            PeriodoAcademico = 2024,
                            RegistroCambios = "Registro de cambios 3",
                            TipoMatricula = "Matrícula Regular"
                        },
                        new
                        {
                            MatriculaId = new Guid("c27da0e6-1439-4ec7-a620-fd84e4a35fd4"),
                            CategoriaMatricula = "Estudiante de Tiempo Completo",
                            Comentarios = "Comentario sobre la matrícula 4",
                            EstadoMatricula = "Activa",
                            FechaMatricula = new DateTime(2024, 5, 29, 20, 9, 10, 787, DateTimeKind.Local).AddTicks(539),
                            InformacionPlanEstudios = "Plan de estudios 2023",
                            PeriodoAcademico = 2024,
                            RegistroCambios = "Registro de cambios 4",
                            TipoMatricula = "Matrícula Regular"
                        },
                        new
                        {
                            MatriculaId = new Guid("bc77b891-31c2-4ffd-a021-10afc910507b"),
                            CategoriaMatricula = "Estudiante de Tiempo Completo",
                            Comentarios = "Comentario sobre la matrícula 5",
                            EstadoMatricula = "Activa",
                            FechaMatricula = new DateTime(2024, 6, 29, 20, 9, 10, 787, DateTimeKind.Local).AddTicks(541),
                            InformacionPlanEstudios = "Plan de estudios 2023",
                            PeriodoAcademico = 2024,
                            RegistroCambios = "Registro de cambios 5",
                            TipoMatricula = "Matrícula Regular"
                        });
                });

            modelBuilder.Entity("Entities.Models.PreMatricula", b =>
                {
                    b.Property<Guid>("PreMatriculaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EstadoPreMatricula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GradoONivel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequisitosDocumentacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Turno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PreMatriculaId");

                    b.ToTable("PreMatricula");

                    b.HasData(
                        new
                        {
                            PreMatriculaId = new Guid("ac95f7eb-58f3-4c1b-9077-5a8f6b1ec349"),
                            EstadoPreMatricula = "Pendiente",
                            GradoONivel = "Quinto de Primaria",
                            Observaciones = "Estudiante con requerimientos especiales.",
                            RequisitosDocumentacion = "NoCumplio",
                            Turno = "Mañana"
                        },
                        new
                        {
                            PreMatriculaId = new Guid("f3c01516-883b-49be-b41a-e3b64b2ab12d"),
                            EstadoPreMatricula = "Activa",
                            GradoONivel = "Séptimo de Secundaria",
                            Observaciones = "Estudiante de transferencia.",
                            RequisitosDocumentacion = "SiCumplio",
                            Turno = "Tarde"
                        },
                        new
                        {
                            PreMatriculaId = new Guid("8ff281ad-d071-4b7b-85d9-96b540684ac8"),
                            EstadoPreMatricula = "Pendiente",
                            GradoONivel = "Tercero de Primaria",
                            Observaciones = "Estudiante extranjero.",
                            RequisitosDocumentacion = "SiCumplio",
                            Turno = "Mañana"
                        },
                        new
                        {
                            PreMatriculaId = new Guid("8d85b4d1-8fb4-4c6a-b52d-2ab316c2b64c"),
                            EstadoPreMatricula = "Activa",
                            GradoONivel = "Cuarto de Secundaria",
                            Observaciones = "Estudiante con beca deportiva.",
                            RequisitosDocumentacion = "SiCumplio",
                            Turno = "Tarde"
                        },
                        new
                        {
                            PreMatriculaId = new Guid("20a535a3-b8c0-42ab-b4f1-a7a200cd135a"),
                            EstadoPreMatricula = "Activa",
                            GradoONivel = "Segundo de Primaria",
                            Observaciones = "Estudiante con discapacidad visual.",
                            RequisitosDocumentacion = "SiCumplio",
                            Turno = "Mañana"
                        },
                        new
                        {
                            PreMatriculaId = new Guid("4587c986-0a14-4a6f-9e3b-0afdffb2c6c7"),
                            EstadoPreMatricula = "Pendiente",
                            GradoONivel = "Octavo de Secundaria",
                            Observaciones = "Estudiante sin observaciones adicionales.",
                            RequisitosDocumentacion = "Si cumplio",
                            Turno = "Tarde"
                        });
                });

            modelBuilder.Entity("Entities.Models.RespuestaCupo", b =>
                {
                    b.Property<Guid>("RespuestaCupoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("DuracionRespuesta")
                        .HasColumnType("time");

                    b.Property<string>("EstadoRespuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaRespuesta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaVencimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("MensajeRespuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prioridad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoRespuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioRespuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RespuestaCupoId");

                    b.ToTable("RespuestaCupo");

                    b.HasData(
                        new
                        {
                            RespuestaCupoId = new Guid("9fd27120-7133-4ac4-8a22-701361d8d110"),
                            DuracionRespuesta = new TimeSpan(30, 0, 0, 0, 0),
                            EstadoRespuesta = "Aceptada",
                            FechaRespuesta = new DateTime(2024, 3, 1, 20, 9, 10, 787, DateTimeKind.Local).AddTicks(20),
                            FechaVencimiento = new DateTime(2024, 3, 29, 20, 9, 10, 787, DateTimeKind.Local).AddTicks(27),
                            MensajeRespuesta = "Respuesta 1",
                            Prioridad = "Alta",
                            TipoRespuesta = "Aceptación",
                            UsuarioRespuesta = "Usuario1"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("0cb903f6-169e-47a5-9e03-9cae6dde80ba"),
                            DuracionRespuesta = new TimeSpan(45, 0, 0, 0, 0),
                            EstadoRespuesta = "Rechazada",
                            FechaRespuesta = new DateTime(2024, 3, 2, 20, 9, 10, 787, DateTimeKind.Local).AddTicks(32),
                            FechaVencimiento = new DateTime(2024, 4, 29, 20, 9, 10, 787, DateTimeKind.Local).AddTicks(33),
                            MensajeRespuesta = "Respuesta 2",
                            Prioridad = "Media",
                            TipoRespuesta = "Rechazo",
                            UsuarioRespuesta = "Usuario2"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("b9babd0d-f21c-4bd6-9d54-7f7cc7464cee"),
                            DuracionRespuesta = new TimeSpan(60, 0, 0, 0, 0),
                            EstadoRespuesta = "Pendiente",
                            FechaRespuesta = new DateTime(2024, 3, 3, 20, 9, 10, 787, DateTimeKind.Local).AddTicks(35),
                            FechaVencimiento = new DateTime(2024, 5, 29, 20, 9, 10, 787, DateTimeKind.Local).AddTicks(36),
                            MensajeRespuesta = "Respuesta 3",
                            Prioridad = "Baja",
                            TipoRespuesta = "Pendiente",
                            UsuarioRespuesta = "Usuario3"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("9223b088-23c9-4763-8f1f-751d7e11759c"),
                            DuracionRespuesta = new TimeSpan(30, 0, 0, 0, 0),
                            EstadoRespuesta = "Aceptada",
                            FechaRespuesta = new DateTime(2024, 3, 4, 20, 9, 10, 787, DateTimeKind.Local).AddTicks(38),
                            FechaVencimiento = new DateTime(2024, 6, 29, 20, 9, 10, 787, DateTimeKind.Local).AddTicks(38),
                            MensajeRespuesta = "Respuesta 4",
                            Prioridad = "Alta",
                            TipoRespuesta = "Aceptación",
                            UsuarioRespuesta = "Usuario4"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("1d199d93-e497-484a-adc4-361f02ebdf99"),
                            DuracionRespuesta = new TimeSpan(45, 0, 0, 0, 0),
                            EstadoRespuesta = "Rechazada",
                            FechaRespuesta = new DateTime(2024, 3, 5, 20, 9, 10, 787, DateTimeKind.Local).AddTicks(40),
                            FechaVencimiento = new DateTime(2024, 7, 29, 20, 9, 10, 787, DateTimeKind.Local).AddTicks(41),
                            MensajeRespuesta = "Respuesta 5",
                            Prioridad = "Media",
                            TipoRespuesta = "Rechazo",
                            UsuarioRespuesta = "Usuario5"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("66b6d300-40f3-4d57-981d-e39fa58d18d8"),
                            DuracionRespuesta = new TimeSpan(30, 0, 0, 0, 0),
                            EstadoRespuesta = "Aceptada",
                            FechaRespuesta = new DateTime(2024, 3, 6, 20, 9, 10, 787, DateTimeKind.Local).AddTicks(42),
                            FechaVencimiento = new DateTime(2024, 8, 29, 20, 9, 10, 787, DateTimeKind.Local).AddTicks(43),
                            MensajeRespuesta = "Respuesta 6",
                            Prioridad = "Alta",
                            TipoRespuesta = "Aceptación",
                            UsuarioRespuesta = "Usuario6"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("365e2f16-97b2-420a-a6ff-12c56018d86a"),
                            DuracionRespuesta = new TimeSpan(45, 0, 0, 0, 0),
                            EstadoRespuesta = "Rechazada",
                            FechaRespuesta = new DateTime(2024, 3, 7, 20, 9, 10, 787, DateTimeKind.Local).AddTicks(47),
                            FechaVencimiento = new DateTime(2024, 9, 29, 20, 9, 10, 787, DateTimeKind.Local).AddTicks(47),
                            MensajeRespuesta = "Respuesta 7",
                            Prioridad = "Media",
                            TipoRespuesta = "Rechazo",
                            UsuarioRespuesta = "Usuario7"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("95089577-a53e-423e-abc5-065b8ebe5b82"),
                            DuracionRespuesta = new TimeSpan(60, 0, 0, 0, 0),
                            EstadoRespuesta = "Pendiente",
                            FechaRespuesta = new DateTime(2024, 3, 8, 20, 9, 10, 787, DateTimeKind.Local).AddTicks(49),
                            FechaVencimiento = new DateTime(2024, 10, 29, 20, 9, 10, 787, DateTimeKind.Local).AddTicks(50),
                            MensajeRespuesta = "Respuesta 8",
                            Prioridad = "Baja",
                            TipoRespuesta = "Pendiente",
                            UsuarioRespuesta = "Usuario8"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("aff7f50a-44f6-4e7e-9526-2f37f4736528"),
                            DuracionRespuesta = new TimeSpan(30, 0, 0, 0, 0),
                            EstadoRespuesta = "Aceptada",
                            FechaRespuesta = new DateTime(2024, 3, 9, 20, 9, 10, 787, DateTimeKind.Local).AddTicks(52),
                            FechaVencimiento = new DateTime(2024, 11, 29, 20, 9, 10, 787, DateTimeKind.Local).AddTicks(52),
                            MensajeRespuesta = "Respuesta 9",
                            Prioridad = "Alta",
                            TipoRespuesta = "Aceptación",
                            UsuarioRespuesta = "Usuario9"
                        });
                });

            modelBuilder.Entity("AcudienteCandidatoEstudiante", b =>
                {
                    b.HasOne("Entities.Models.D_Acudiente.Acudiente", null)
                        .WithMany()
                        .HasForeignKey("AcudienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.D_Estudiante.CandidatoEstudiante", null)
                        .WithMany()
                        .HasForeignKey("CandidatoEstudianteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CursoDocente", b =>
                {
                    b.HasOne("Entities.Models.D_DepartamentoAcademico.Cursos", null)
                        .WithMany()
                        .HasForeignKey("CursosCursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.D_Docente.Docente", null)
                        .WithMany()
                        .HasForeignKey("DocentesDocenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DocenteMateria", b =>
                {
                    b.HasOne("Entities.Models.D_Docente.Docente", null)
                        .WithMany()
                        .HasForeignKey("DocenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.D_DepartamentoAcademico.Materias", null)
                        .WithMany()
                        .HasForeignKey("MateriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.D_Docente.Docente", b =>
                {
                    b.HasOne("Entities.Models.D_DepartamentoAcademico.Aulas", "Aula")
                        .WithOne("Docente")
                        .HasForeignKey("Entities.Models.D_Docente.Docente", "AulaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.D_DepartamentoAcademico.Horarios", "Horario")
                        .WithOne("Docente")
                        .HasForeignKey("Entities.Models.D_Docente.Docente", "HorarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aula");

                    b.Navigation("Horario");
                });

            modelBuilder.Entity("Entities.Models.D_DepartamentoAcademico.Aulas", b =>
                {
                    b.Navigation("Docente")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.D_DepartamentoAcademico.Horarios", b =>
                {
                    b.Navigation("Docente")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
