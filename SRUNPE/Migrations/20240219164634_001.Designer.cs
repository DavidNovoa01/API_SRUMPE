// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace SRUNPE.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240219164634_001")]
    partial class _001
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.D_Acudiente.Acudiente", b =>
                {
                    b.Property<Guid>("AcudienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Apellidos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorreoElectronico")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Edad")
                        .HasColumnType("int");

                    b.Property<string>("EstadoCivil")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroIdentificacion")
                        .HasColumnType("int");

                    b.Property<string>("Ocupacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelacionConEstudiante")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcudienteId");

                    b.ToTable("Acudiente");

                    b.HasData(
                        new
                        {
                            AcudienteId = new Guid("93c6f6d2-d727-4c9a-8894-d9695729658b"),
                            Apellidos = "Pérez",
                            CorreoElectronico = "maria.perez@email.com",
                            Edad = 12,
                            EstadoCivil = "Casada",
                            FechaRegistro = new DateTime(2024, 2, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(1217),
                            Nombres = "María",
                            NumeroIdentificacion = 12345,
                            Ocupacion = "Ingeniera",
                            RelacionConEstudiante = "Madre"
                        },
                        new
                        {
                            AcudienteId = new Guid("da44297c-a8dc-4ae4-8291-e9ec6130bea8"),
                            Apellidos = "González",
                            CorreoElectronico = "juan.gonzalez@email.com",
                            Edad = 12,
                            EstadoCivil = "Soltero",
                            FechaRegistro = new DateTime(2024, 2, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(1220),
                            Nombres = "Juan",
                            NumeroIdentificacion = 67890,
                            Ocupacion = "Abogado",
                            RelacionConEstudiante = "Padre"
                        },
                        new
                        {
                            AcudienteId = new Guid("b1e62c6d-4c84-47d3-a8e5-40bae93a30fa"),
                            Apellidos = "López",
                            CorreoElectronico = "ana.lopez@email.com",
                            Edad = 12,
                            EstadoCivil = "Divorciada",
                            FechaRegistro = new DateTime(2024, 2, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(1222),
                            Nombres = "Ana",
                            NumeroIdentificacion = 54321,
                            Ocupacion = "Médica",
                            RelacionConEstudiante = "Tutor Legal"
                        },
                        new
                        {
                            AcudienteId = new Guid("9fb303c7-f7ff-48cb-af6c-0d68530571c4"),
                            Apellidos = "Martínez",
                            CorreoElectronico = "pedro.martinez@email.com",
                            Edad = 12,
                            EstadoCivil = "Casado",
                            FechaRegistro = new DateTime(2024, 2, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(1224),
                            Nombres = "Pedro",
                            NumeroIdentificacion = 98765,
                            Ocupacion = "Profesor",
                            RelacionConEstudiante = "Padre"
                        },
                        new
                        {
                            AcudienteId = new Guid("66670767-6c77-4e56-9ed6-d90c7c248de0"),
                            Apellidos = "Díaz",
                            CorreoElectronico = "sofia.diaz@email.com",
                            Edad = 12,
                            EstadoCivil = "Soltera",
                            FechaRegistro = new DateTime(2024, 2, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(1226),
                            Nombres = "Sofía",
                            NumeroIdentificacion = 75319,
                            Ocupacion = "Profesora",
                            RelacionConEstudiante = "Tía"
                        },
                        new
                        {
                            AcudienteId = new Guid("e9a14465-c076-4099-b05d-75b967a0b66b"),
                            Apellidos = "Luna",
                            CorreoElectronico = "roberto.luna@email.com",
                            Edad = 12,
                            EstadoCivil = "Viudo",
                            FechaRegistro = new DateTime(2024, 2, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(1228),
                            Nombres = "Roberto",
                            NumeroIdentificacion = 10293,
                            Ocupacion = "Jubilado",
                            RelacionConEstudiante = "Abuelo"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Acudiente.DireccionAcudiente", b =>
                {
                    b.Property<Guid>("DireccionAcudienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Calle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CiudadLocalidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoPostal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColoniaBarrio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoProvincia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DireccionAcudienteId");

                    b.ToTable("DireccionAcudiente");

                    b.HasData(
                        new
                        {
                            DireccionAcudienteId = new Guid("7a2f8b7b-ab3d-4908-9b09-649f65990158"),
                            Calle = "Calle 72",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110231",
                            ColoniaBarrio = "Chapinero",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("68c657a3-2b01-4a34-98a8-9ad6034bb397"),
                            Calle = "Calle 72",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110231",
                            ColoniaBarrio = "Chapinero",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("17e57665-58d7-4ae0-aa6e-1a5a25fe4e6c"),
                            Calle = "Carrera 10",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110321",
                            ColoniaBarrio = "La Candelaria",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("80dc1703-53c1-4e5a-bebe-d58c6e04d1e5"),
                            Calle = "Avenida Boyacá",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110511",
                            ColoniaBarrio = "Fontibón",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("21f36b90-45c4-4838-b263-a0c54ff56799"),
                            Calle = "Calle 80",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110841",
                            ColoniaBarrio = "Engativá",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("2ce722d0-eff1-4afd-9c54-bed114b8fd11"),
                            Calle = "Carrera 7",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110171",
                            ColoniaBarrio = "Usaquén",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("ad034359-39bf-413f-bbec-ed30d9af5cfc"),
                            Calle = "Avenida 68",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110841",
                            ColoniaBarrio = "Kennedy",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Acudiente.TelefonoAcudiente", b =>
                {
                    b.Property<Guid>("TelefonoAcudienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AcudienteId")
                        .HasColumnType("int");

                    b.Property<string>("Indicativo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TelefonoAcudienteId");

                    b.ToTable("TelefonoAcudiente");

                    b.HasData(
                        new
                        {
                            TelefonoAcudienteId = new Guid("034f7c7c-b132-424d-b50e-3eb04fde5341"),
                            AcudienteId = 1,
                            Indicativo = "+1",
                            Numero = -4135,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("a222d6c5-56bc-4638-b8f5-79e5b46812bd"),
                            AcudienteId = 2,
                            Indicativo = "+1",
                            Numero = -6975,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("54a5821b-db79-4377-80b6-5da1c7e5a240"),
                            AcudienteId = 3,
                            Indicativo = "+1",
                            Numero = -5357,
                            Tipo = "Fijo"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("0225777c-a72d-4da6-b070-71e5cc689fa2"),
                            AcudienteId = 4,
                            Indicativo = "+1",
                            Numero = -5753,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("528a3e67-c4b2-4fc9-9a08-67fcb99e51a9"),
                            AcudienteId = 5,
                            Indicativo = "+1",
                            Numero = 911,
                            Tipo = "Emergencia"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("045178e8-ba9d-44d2-9f7d-b7ddb264a849"),
                            AcudienteId = 1,
                            Indicativo = "+1",
                            Numero = -667,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("eb3b8dbd-7396-42fe-9481-8a92bf9f5086"),
                            AcudienteId = 2,
                            Indicativo = "+1",
                            Numero = -1889,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("7a49b500-4d1b-4199-9c6c-84597f39c3e5"),
                            AcudienteId = 3,
                            Indicativo = "+1",
                            Numero = -3111,
                            Tipo = "Fijo"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("716bcb57-1df8-47e1-94ab-ed5fa93c2cc6"),
                            AcudienteId = 4,
                            Indicativo = "+1",
                            Numero = -4333,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("0506f979-ce96-4ce4-9d96-10b92d8002af"),
                            AcudienteId = 5,
                            Indicativo = "+1",
                            Numero = -5555,
                            Tipo = "Emergencia"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_DepartamentoAcademico.Aulas", b =>
                {
                    b.Property<Guid>("AulaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacidad")
                        .HasColumnType("int");

                    b.Property<string>("EstadoAula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HorarioDisponibilidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreNumero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotasAdicionales")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrosIncidentesProblemas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsableAula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoAula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UltimaActualizacion")
                        .HasColumnType("datetime2");

                    b.HasKey("AulaId");

                    b.ToTable("Aulas");

                    b.HasData(
                        new
                        {
                            AulaId = new Guid("1deeb9fb-c429-40f4-a7c3-c6c7c0a5fc91"),
                            Capacidad = 50,
                            EstadoAula = "Disponible",
                            HorarioDisponibilidad = "Lunes a Viernes, 08:00 AM - 06:00 PM",
                            NombreNumero = "Aula 101",
                            NotasAdicionales = "Equipada con proyector",
                            RegistrosIncidentesProblemas = "Ninguno",
                            ResponsableAula = "Profesor Responsable 1",
                            TipoAula = "Salón de Clases",
                            Ubicacion = "Edificio Principal",
                            UltimaActualizacion = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AulaId = new Guid("c070d47f-d957-46e2-b767-d75998a6284e"),
                            Capacidad = 30,
                            EstadoAula = "Ocupado",
                            HorarioDisponibilidad = "Lunes a Viernes, 10:00 AM - 05:00 PM",
                            NombreNumero = "Aula 102",
                            NotasAdicionales = "Equipado con computadoras de última generación",
                            RegistrosIncidentesProblemas = "Reporte de fallo en una computadora",
                            ResponsableAula = "Profesor Responsable 2",
                            TipoAula = "Laboratorio de Informática",
                            Ubicacion = "Edificio de Ciencias",
                            UltimaActualizacion = new DateTime(2023, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AulaId = new Guid("900fef67-1b98-4657-bf8c-7abb9a69c44a"),
                            Capacidad = 100,
                            EstadoAula = "Disponible",
                            HorarioDisponibilidad = "Disponible previa reserva",
                            NombreNumero = "Aula 103",
                            NotasAdicionales = "Equipada con proyector y sistema de sonido",
                            RegistrosIncidentesProblemas = "Ninguno",
                            ResponsableAula = "Personal de Eventos",
                            TipoAula = "Sala de Conferencias",
                            Ubicacion = "Edificio de Eventos",
                            UltimaActualizacion = new DateTime(2023, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AulaId = new Guid("7450dd19-8be4-4146-be27-a9839ba95fff"),
                            Capacidad = 40,
                            EstadoAula = "En Mantenimiento",
                            HorarioDisponibilidad = "No disponible temporalmente",
                            NombreNumero = "Aula 104",
                            NotasAdicionales = "Mantenimiento programado",
                            RegistrosIncidentesProblemas = "Reporte de fugas de agua en el techo",
                            ResponsableAula = "Personal de Mantenimiento",
                            TipoAula = "Salón de Clases",
                            Ubicacion = "Edificio Principal",
                            UltimaActualizacion = new DateTime(2023, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AulaId = new Guid("15a11ed9-7fdf-47c8-ba3d-85a9a995d56e"),
                            Capacidad = 10,
                            EstadoAula = "Disponible",
                            HorarioDisponibilidad = "Lunes a Domingo, 09:00 AM - 11:00 PM",
                            NombreNumero = "Aula 105",
                            NotasAdicionales = "Área de estudio tranquila",
                            RegistrosIncidentesProblemas = "Ninguno",
                            ResponsableAula = "Bibliotecario",
                            TipoAula = "Sala de Estudio",
                            Ubicacion = "Biblioteca",
                            UltimaActualizacion = new DateTime(2023, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Entities.Models.D_DepartamentoAcademico.Cursos", b =>
                {
                    b.Property<Guid>("CursoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AulasAsignadas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartamentoAcademico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaLimiteInscripcion")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetodosEnsenanza")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nivel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfesorAsignado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CursoId");

                    b.ToTable("Cursos");

                    b.HasData(
                        new
                        {
                            CursoId = new Guid("138e216d-37e0-4fec-a42d-38fbad3a93c3"),
                            AulasAsignadas = "Aula 101, Aula 102",
                            Codigo = "CS101",
                            DepartamentoAcademico = "Ciencias de la Computación",
                            Descripcion = "Introducción a la Programación",
                            FechaLimiteInscripcion = new DateTime(2023, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MetodosEnsenanza = "Clases magistrales, laboratorios prácticos",
                            Nivel = "Primer Semestre",
                            ProfesorAsignado = "Profesor 1"
                        },
                        new
                        {
                            CursoId = new Guid("4ab3bf8c-8fef-4794-861c-f46aff1924b2"),
                            AulasAsignadas = "Classroom 201, Classroom 202",
                            Codigo = "ENG201",
                            DepartamentoAcademico = "English Department",
                            Descripcion = "Advanced English Composition",
                            FechaLimiteInscripcion = new DateTime(2023, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MetodosEnsenanza = "Lectures, writing assignments, group discussions",
                            Nivel = "Second Semester",
                            ProfesorAsignado = "Professor 2"
                        },
                        new
                        {
                            CursoId = new Guid("4a005da6-a711-469a-af0e-e0237c5dbf4c"),
                            AulasAsignadas = "Math Classroom 301",
                            Codigo = "MATH301",
                            DepartamentoAcademico = "Mathematics Department",
                            Descripcion = "Advanced Calculus",
                            FechaLimiteInscripcion = new DateTime(2023, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MetodosEnsenanza = "Lectures, problem sets, exams",
                            Nivel = "Third Semester",
                            ProfesorAsignado = "Professor 3"
                        },
                        new
                        {
                            CursoId = new Guid("88475ece-b027-49e5-9e0b-b1d40ae5c6a2"),
                            AulasAsignadas = "Chemistry Lab 201",
                            Codigo = "CHEM201",
                            DepartamentoAcademico = "Chemistry Department",
                            Descripcion = "Organic Chemistry",
                            FechaLimiteInscripcion = new DateTime(2023, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MetodosEnsenanza = "Lectures, laboratory experiments",
                            Nivel = "Second Semester",
                            ProfesorAsignado = "Professor 4"
                        },
                        new
                        {
                            CursoId = new Guid("f8415ff5-4744-47cd-9057-d0588166f50d"),
                            AulasAsignadas = "History Classroom 101",
                            Codigo = "HIST101",
                            DepartamentoAcademico = "History Department",
                            Descripcion = "Introduction to History",
                            FechaLimiteInscripcion = new DateTime(2023, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MetodosEnsenanza = "Lectures, discussions, research papers",
                            Nivel = "First Semester",
                            ProfesorAsignado = "Professor 5"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_DepartamentoAcademico.Horarios", b =>
                {
                    b.Property<Guid>("HorarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DiaSemana")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DuracionClaseMinutos")
                        .HasColumnType("int");

                    b.Property<string>("EstadoHorario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaFinClases")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicioClases")
                        .HasColumnType("datetime2");

                    b.Property<string>("GrupoSeccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("HoraFin")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HoraInicio")
                        .HasColumnType("time");

                    b.Property<string>("NotificacionCambioHorario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeriodoAcademico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfesorAsistente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalaAula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HorarioId");

                    b.ToTable("Horarios");

                    b.HasData(
                        new
                        {
                            HorarioId = new Guid("96d94194-8f4f-4363-aa34-7c7fc3cc8079"),
                            DiaSemana = "Lunes",
                            DuracionClaseMinutos = 120,
                            EstadoHorario = "Activo",
                            FechaFinClases = new DateTime(2023, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicioClases = new DateTime(2023, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrupoSeccion = "Grupo A",
                            HoraFin = new TimeSpan(0, 11, 0, 0, 0),
                            HoraInicio = new TimeSpan(0, 9, 0, 0, 0),
                            NotificacionCambioHorario = "No",
                            PeriodoAcademico = "Semestre de Otoño",
                            ProfesorAsistente = "Profesor Asistente 1",
                            SalaAula = "Aula 101"
                        },
                        new
                        {
                            HorarioId = new Guid("0ab79944-5869-4d2e-8868-94ace9184283"),
                            DiaSemana = "Martes",
                            DuracionClaseMinutos = 120,
                            EstadoHorario = "Activo",
                            FechaFinClases = new DateTime(2023, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicioClases = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrupoSeccion = "Grupo B",
                            HoraFin = new TimeSpan(0, 16, 0, 0, 0),
                            HoraInicio = new TimeSpan(0, 14, 0, 0, 0),
                            NotificacionCambioHorario = "Sí",
                            PeriodoAcademico = "Semestre de Primavera",
                            ProfesorAsistente = "Profesor Asistente 2",
                            SalaAula = "Aula 203"
                        },
                        new
                        {
                            HorarioId = new Guid("ed44d190-954e-43c5-8b01-c1a42126e865"),
                            DiaSemana = "Miércoles",
                            DuracionClaseMinutos = 120,
                            EstadoHorario = "Activo",
                            FechaFinClases = new DateTime(2023, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicioClases = new DateTime(2023, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrupoSeccion = "Grupo C",
                            HoraFin = new TimeSpan(0, 13, 30, 0, 0),
                            HoraInicio = new TimeSpan(0, 11, 30, 0, 0),
                            NotificacionCambioHorario = "No",
                            PeriodoAcademico = "Semestre de Verano",
                            ProfesorAsistente = "Profesor Asistente 3",
                            SalaAula = "Aula 305"
                        },
                        new
                        {
                            HorarioId = new Guid("8a83b060-5eaa-492f-af49-f58f81a9d666"),
                            DiaSemana = "Jueves",
                            DuracionClaseMinutos = 120,
                            EstadoHorario = "Activo",
                            FechaFinClases = new DateTime(2024, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicioClases = new DateTime(2023, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrupoSeccion = "Grupo D",
                            HoraFin = new TimeSpan(0, 18, 30, 0, 0),
                            HoraInicio = new TimeSpan(0, 16, 30, 0, 0),
                            NotificacionCambioHorario = "Sí",
                            PeriodoAcademico = "Semestre de Invierno",
                            ProfesorAsistente = "Profesor Asistente 4",
                            SalaAula = "Aula 401"
                        },
                        new
                        {
                            HorarioId = new Guid("32429925-e23e-48df-b230-70fbdb4a9d18"),
                            DiaSemana = "Viernes",
                            DuracionClaseMinutos = 120,
                            EstadoHorario = "Activo",
                            FechaFinClases = new DateTime(2023, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicioClases = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrupoSeccion = "Grupo E",
                            HoraFin = new TimeSpan(0, 10, 0, 0, 0),
                            HoraInicio = new TimeSpan(0, 8, 0, 0, 0),
                            NotificacionCambioHorario = "No",
                            PeriodoAcademico = "Semestre de Primavera",
                            ProfesorAsistente = "Profesor Asistente 5",
                            SalaAula = "Aula 102"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_DepartamentoAcademico.Materias", b =>
                {
                    b.Property<Guid>("MateriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DepartamentoAcademico")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GrupoSeccionMateria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetodosEnsenanza")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModalidadEnsenanza")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nivel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotasAdicionales")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfesorAsignado")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MateriaId");

                    b.ToTable("Materias");

                    b.HasData(
                        new
                        {
                            MateriaId = new Guid("d57939e5-660a-4580-8fdf-df0effa91c68"),
                            DepartamentoAcademico = "Departamento de Matemáticas",
                            Descripcion = "Curso de Matemáticas Avanzadas",
                            Estado = "En progreso",
                            GrupoSeccionMateria = "Grupo A",
                            MetodosEnsenanza = "Clases teóricas y prácticas",
                            ModalidadEnsenanza = "Presencial",
                            Nivel = "Avanzado",
                            Nombre = "Matemáticas",
                            NotasAdicionales = "Se requiere calculadora científica.",
                            ProfesorAsignado = "Profesor Matemático"
                        },
                        new
                        {
                            MateriaId = new Guid("089abce0-58d6-4cba-9d67-b0768ab1daa6"),
                            DepartamentoAcademico = "Departamento de Historia",
                            Descripcion = "Curso de Historia Mundial",
                            Estado = "Inscripciones abiertas",
                            GrupoSeccionMateria = "Grupo B",
                            MetodosEnsenanza = "Conferencias y debates",
                            ModalidadEnsenanza = "Presencial",
                            Nivel = "Intermedio",
                            Nombre = "Historia",
                            NotasAdicionales = "Recomendado para estudiantes de Historia.",
                            ProfesorAsignado = "Profesor Historiador"
                        },
                        new
                        {
                            MateriaId = new Guid("05ef7383-2284-42f3-bbc5-3860aa53b3e9"),
                            DepartamentoAcademico = "Departamento de Informática",
                            Descripcion = "Curso de Ciencias de la Computación",
                            Estado = "En progreso",
                            GrupoSeccionMateria = "Grupo C",
                            MetodosEnsenanza = "Clases virtuales y proyectos prácticos",
                            ModalidadEnsenanza = "En línea",
                            Nivel = "Avanzado",
                            Nombre = "Ciencias de la Computación",
                            NotasAdicionales = "Requiere acceso a una computadora.",
                            ProfesorAsignado = "Profesor de Informática"
                        },
                        new
                        {
                            MateriaId = new Guid("d2cf2feb-691a-4ae5-81a0-dcceb33d96cd"),
                            DepartamentoAcademico = "Departamento de Literatura",
                            Descripcion = "Curso de Literatura Universal",
                            Estado = "Inscripciones abiertas",
                            GrupoSeccionMateria = "Grupo D",
                            MetodosEnsenanza = "Lecturas y discusiones literarias",
                            ModalidadEnsenanza = "Presencial",
                            Nivel = "Intermedio",
                            Nombre = "Literatura",
                            NotasAdicionales = "Apto para amantes de la lectura.",
                            ProfesorAsignado = "Profesor Literario"
                        },
                        new
                        {
                            MateriaId = new Guid("ff7231c2-3dde-4cd2-8626-221d61e95ce5"),
                            DepartamentoAcademico = "Departamento de Física",
                            Descripcion = "Curso de Física Avanzada",
                            Estado = "Completo",
                            GrupoSeccionMateria = "Grupo E",
                            MetodosEnsenanza = "Experimentos y clases teóricas",
                            ModalidadEnsenanza = "Presencial",
                            Nivel = "Avanzado",
                            Nombre = "Física",
                            NotasAdicionales = "Requiere conocimientos previos de física.",
                            ProfesorAsignado = "Profesor de Física"
                        },
                        new
                        {
                            MateriaId = new Guid("9e98a33e-0f97-4cc2-81c3-77dfa533d69c"),
                            DepartamentoAcademico = "Departamento de Economía",
                            Descripcion = "Curso de Economía Moderna",
                            Estado = "En progreso",
                            GrupoSeccionMateria = "Grupo F",
                            MetodosEnsenanza = "Clases virtuales y análisis económico",
                            ModalidadEnsenanza = "En línea",
                            Nivel = "Intermedio",
                            Nombre = "Economía",
                            NotasAdicionales = "Abordaremos temas financieros actuales.",
                            ProfesorAsignado = "Profesor Economista"
                        },
                        new
                        {
                            MateriaId = new Guid("67c21d7a-6090-4926-8ef8-e46c5b1a842e"),
                            DepartamentoAcademico = "Departamento de Arte",
                            Descripcion = "Curso de Arte Contemporáneo",
                            Estado = "Inscripciones abiertas",
                            GrupoSeccionMateria = "Grupo G",
                            MetodosEnsenanza = "Prácticas artísticas y exposiciones",
                            ModalidadEnsenanza = "Presencial",
                            Nivel = "Intermedio",
                            Nombre = "Arte",
                            NotasAdicionales = "No se requiere experiencia previa en arte.",
                            ProfesorAsignado = "Profesor de Arte"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Docente.Docente", b =>
                {
                    b.Property<Guid>("DocenteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ComentariosNotas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorreoElectronico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CursosAsignados")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoLaboral")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaContratacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Fotografia")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HorarioClases")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NivelExperiencia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroIdentificacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroTelefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocenteId");

                    b.ToTable("Docentes");

                    b.HasData(
                        new
                        {
                            DocenteId = new Guid("8297b37f-0354-4058-8926-83a8a09f8c4f"),
                            ComentariosNotas = "Excellent teacher with great communication skills.",
                            CorreoElectronico = "john.smith@example.com",
                            CursosAsignados = "Mathematics, Physics",
                            Direccion = "123 Main Street, Cityville",
                            EstadoLaboral = "Active",
                            FechaContratacion = new DateTime(2010, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaNacimiento = new DateTime(1980, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genero = "Male",
                            HorarioClases = "Mon-Fri: 8 am - 4 pm",
                            NivelExperiencia = "Senior",
                            Nombre = "John Smith",
                            NumeroIdentificacion = "D123456789",
                            NumeroTelefono = "+1 (555) 123-4567"
                        },
                        new
                        {
                            DocenteId = new Guid("7558ac2a-3209-4ef7-bf40-0ff4b7159810"),
                            ComentariosNotas = "Passionate about her subject and dedicated to student success.",
                            CorreoElectronico = "alice.johnson@example.com",
                            CursosAsignados = "Literature, History",
                            Direccion = "456 Oak Avenue, Townsville",
                            EstadoLaboral = "Active",
                            FechaContratacion = new DateTime(2015, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaNacimiento = new DateTime(1985, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genero = "Female",
                            HorarioClases = "Tue-Thu: 10 am - 6 pm",
                            NivelExperiencia = "Intermediate",
                            Nombre = "Alice Johnson",
                            NumeroIdentificacion = "D987654321",
                            NumeroTelefono = "+1 (555) 987-6543"
                        },
                        new
                        {
                            DocenteId = new Guid("21c57607-1c0c-406b-a23d-ed008a8abe25"),
                            ComentariosNotas = "Brings real-world experience to the classroom.",
                            CorreoElectronico = "carlos.rodriguez@example.com",
                            CursosAsignados = "Computer Science, Programming",
                            Direccion = "789 Pine Lane, Villagetown",
                            EstadoLaboral = "Active",
                            FechaContratacion = new DateTime(2020, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaNacimiento = new DateTime(1992, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genero = "Male",
                            HorarioClases = "Mon-Wed-Fri: 9 am - 3 pm",
                            NivelExperiencia = "Junior",
                            Nombre = "Carlos Rodriguez",
                            NumeroIdentificacion = "D555111222",
                            NumeroTelefono = "+1 (555) 876-5432"
                        },
                        new
                        {
                            DocenteId = new Guid("86ebc564-b3eb-4e2a-86e6-834e81846bd6"),
                            ComentariosNotas = "Encourages critical thinking and curiosity in students.",
                            CorreoElectronico = "emily.white@example.com",
                            CursosAsignados = "Chemistry, Biology",
                            Direccion = "234 Elm Street, Hamletville",
                            EstadoLaboral = "Active",
                            FechaContratacion = new DateTime(2018, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaNacimiento = new DateTime(1988, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genero = "Female",
                            HorarioClases = "Thu-Fri: 11 am - 5 pm",
                            NivelExperiencia = "Senior",
                            Nombre = "Emily White",
                            NumeroIdentificacion = "D333444555",
                            NumeroTelefono = "+1 (555) 234-5678"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Estudiante.CandidatoEstudiante", b =>
                {
                    b.Property<Guid>("CandidatoEstudianteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdjuntarDocumentos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("NumeroContacto")
                        .HasColumnType("bigint");

                    b.Property<long>("NumeroDocumento")
                        .HasColumnType("bigint");

                    b.Property<string>("TipoDocumento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoPersona")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CandidatoEstudianteId");

                    b.ToTable("CandidatoEstudiantes");

                    b.HasData(
                        new
                        {
                            CandidatoEstudianteId = new Guid("1e2dbaaa-1c28-414a-be7b-1a4a08cfe4be"),
                            AdjuntarDocumentos = "Si",
                            Apellido = "Doe",
                            Direccion = "123 Main Street",
                            Genero = "Masculino",
                            Nombre = "John",
                            NumeroContacto = 987654321L,
                            NumeroDocumento = 123456789L,
                            TipoDocumento = "cedula",
                            TipoPersona = "Persona"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("21170829-6fbf-4f18-97be-f876a9d9d90c"),
                            AdjuntarDocumentos = "Si",
                            Apellido = "Smith",
                            Direccion = "456 Oak Avenue",
                            FechaNacimiento = new DateTime(1985, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genero = "Femenino",
                            Nombre = "Jane",
                            NumeroContacto = 123456789L,
                            NumeroDocumento = 987654321L,
                            TipoDocumento = "Cedula",
                            TipoPersona = "Persona"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("618f076c-217a-4171-a1a0-caaa39296bdd"),
                            AdjuntarDocumentos = "Si",
                            Apellido = "Johnson",
                            Direccion = "789 Pine Road",
                            FechaNacimiento = new DateTime(1995, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genero = "No binario",
                            Nombre = "Bob",
                            NumeroContacto = 555555555L,
                            NumeroDocumento = 456789012L,
                            TipoDocumento = "Tarjeta de Identidad",
                            TipoPersona = "Persona"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("986b2a85-eaf6-4fea-8493-68c139c891c0"),
                            AdjuntarDocumentos = "No",
                            Apellido = "Williams",
                            Direccion = "101 Cedar Lane",
                            FechaNacimiento = new DateTime(1980, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genero = "Otro",
                            Nombre = "Alice",
                            NumeroContacto = 444555666L,
                            NumeroDocumento = 333222111L,
                            TipoDocumento = "Tarjeta de Identidad",
                            TipoPersona = "Persona"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("e72f9956-3be4-4257-af90-1c3a3a74cf5d"),
                            AdjuntarDocumentos = "Si",
                            Apellido = "Brown",
                            Direccion = "202 Elm Street",
                            FechaNacimiento = new DateTime(1992, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genero = "Masculino",
                            Nombre = "Charlie",
                            NumeroContacto = 111222333L,
                            NumeroDocumento = 999888777L,
                            TipoDocumento = "Tarjeta de Identidad",
                            TipoPersona = "Persona"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Estudiante.Cupo", b =>
                {
                    b.Property<Guid>("CupoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CantidadDisponible")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duracion")
                        .HasColumnType("time");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ubicacion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CupoId");

                    b.ToTable("Cupo");

                    b.HasData(
                        new
                        {
                            CupoId = new Guid("54876fe7-f2df-4df5-816a-ee290afdea92"),
                            CantidadDisponible = 10,
                            Descripcion = "Cupo para el evento principal",
                            Duracion = new TimeSpan(0, 2, 0, 0, 0),
                            Estado = true,
                            FechaFin = new DateTime(2024, 3, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(1915),
                            FechaInicio = new DateTime(2024, 2, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(1913),
                            Ubicacion = "Salón principal"
                        },
                        new
                        {
                            CupoId = new Guid("c33d0a6a-2997-4de4-b60c-d7535af5693e"),
                            CantidadDisponible = 5,
                            Descripcion = "Cupo para el taller de programación",
                            Duracion = new TimeSpan(0, 3, 0, 0, 0),
                            Estado = true,
                            FechaFin = new DateTime(2024, 4, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(1929),
                            FechaInicio = new DateTime(2024, 2, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(1928),
                            Ubicacion = "Aula 101"
                        },
                        new
                        {
                            CupoId = new Guid("07e8adb3-7859-4d5d-b383-567a929dd3aa"),
                            CantidadDisponible = 20,
                            Descripcion = "Cupo para el seminario de marketing",
                            Duracion = new TimeSpan(0, 4, 0, 0, 0),
                            Estado = true,
                            FechaFin = new DateTime(2024, 5, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(1932),
                            FechaInicio = new DateTime(2024, 2, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(1931),
                            Ubicacion = "Aula 102"
                        },
                        new
                        {
                            CupoId = new Guid("adbc23bb-95a0-495e-afd0-0ae98561aca7"),
                            CantidadDisponible = 15,
                            Descripcion = "Cupo para el curso de diseño gráfico",
                            Duracion = new TimeSpan(0, 2, 0, 0, 0),
                            Estado = true,
                            FechaFin = new DateTime(2024, 6, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(1935),
                            FechaInicio = new DateTime(2024, 2, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(1934),
                            Ubicacion = "Aula 103"
                        },
                        new
                        {
                            CupoId = new Guid("a99f1ceb-bf01-4fb3-a709-9ece71f781f0"),
                            CantidadDisponible = 30,
                            Descripcion = "Cupo para el evento de networking",
                            Duracion = new TimeSpan(0, 1, 0, 0, 0),
                            Estado = true,
                            FechaFin = new DateTime(2024, 7, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(1937),
                            FechaInicio = new DateTime(2024, 2, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(1936),
                            Ubicacion = "Aula 104"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Estudiante.EstudianteDocumentos", b =>
                {
                    b.Property<Guid>("EstudianteDocumentosId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreDocumento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroDocumento")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tamaño")
                        .HasColumnType("int");

                    b.Property<string>("TipoDocumento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ubicacion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EstudianteDocumentosId");

                    b.ToTable("EstudianteDocumentos");

                    b.HasData(
                        new
                        {
                            EstudianteDocumentosId = new Guid("6a30c846-4b9d-4cf5-bb17-051a3e9d1b72"),
                            Estado = true,
                            NombreDocumento = "Certificado de Nacimiento",
                            NumeroDocumento = 61464465,
                            Observaciones = "Ninguna",
                            Tamaño = 1024,
                            TipoDocumento = "Identificación",
                            Ubicacion = "ruta/al/documento1"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("2d54a999-187f-4a8c-99db-d17841e7938c"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 2, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(986),
                            NombreDocumento = "Diploma",
                            NumeroDocumento = 987654,
                            Observaciones = "Logros académicos",
                            Tamaño = 2048,
                            TipoDocumento = "Educativo",
                            Ubicacion = "ruta/al/documento2"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("3e68515e-3a47-4a62-a8c7-9f12242d020e"),
                            Estado = false,
                            FechaActualizacion = new DateTime(2024, 2, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(999),
                            NombreDocumento = "Certificado de Graduación",
                            NumeroDocumento = 123456,
                            Observaciones = "Graduación universitaria",
                            Tamaño = 1536,
                            TipoDocumento = "Educativo",
                            Ubicacion = "ruta/al/documento3"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("4a303cce-8c0e-4ae7-89c1-067d0b7741b6"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 2, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(1002),
                            NombreDocumento = "Certificado de Matrícula",
                            NumeroDocumento = 789012,
                            Observaciones = "Matrícula escolar",
                            Tamaño = 8192,
                            TipoDocumento = "Educativo",
                            Ubicacion = "ruta/al/documento4"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("5f78d0e1-579e-4dfc-82a1-92010b4191d3"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 2, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(1008),
                            NombreDocumento = "Cédula de Identidad",
                            NumeroDocumento = 555555,
                            Observaciones = "Documento oficial",
                            Tamaño = 4096,
                            TipoDocumento = "Identificación",
                            Ubicacion = "ruta/al/documento5"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("f38f6b1a-86e9-4d9d-8a7a-62f17e6f1ba2"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 2, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(1011),
                            NombreDocumento = "Carné de Estudiante",
                            NumeroDocumento = 7890123,
                            Observaciones = "Carné escolar",
                            Tamaño = 3072,
                            TipoDocumento = "Identificación",
                            Ubicacion = "ruta/al/documento6"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("7e15d9a4-98cb-4d14-9a35-862f8c202725"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 2, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(1014),
                            NombreDocumento = "Boleta de Calificaciones",
                            NumeroDocumento = 9876543,
                            Observaciones = "Registro académico",
                            Tamaño = 5120,
                            TipoDocumento = "Educativo",
                            Ubicacion = "ruta/al/documento7"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("8f4a67c2-fd5e-4316-8c50-7249f159d0f1"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 2, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(1016),
                            NombreDocumento = "Pasaporte",
                            NumeroDocumento = 1234567,
                            Observaciones = "Documento de viaje",
                            Tamaño = 4096,
                            TipoDocumento = "Identificación",
                            Ubicacion = "ruta/al/documento8"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("9b9d6d8f-72f0-4f0a-8e18-1e75b0182e3f"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 2, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(1018),
                            NombreDocumento = "Certificado Médico",
                            NumeroDocumento = 543210,
                            Observaciones = "Informe médico",
                            Tamaño = 2048,
                            TipoDocumento = "Salud",
                            Ubicacion = "ruta/al/documento9"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("10a5e754-1570-4be0-8650-2c53d7cfb4d3"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 2, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(1019),
                            NombreDocumento = "Fotografía del Estudiante",
                            NumeroDocumento = 1111111,
                            Observaciones = "Foto de perfil",
                            Tamaño = 1024,
                            TipoDocumento = "Identificación",
                            Ubicacion = "ruta/al/documento10"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Notas.Asistencia", b =>
                {
                    b.Property<int>("AsistenciaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AsistenciaId"));

                    b.Property<bool>("Asistio")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaHoraAsistencia")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreAsistente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoEvento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UbicacionEvento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AsistenciaId");

                    b.ToTable("Asistencia");

                    b.HasData(
                        new
                        {
                            AsistenciaId = 1,
                            Asistio = true,
                            FechaHoraAsistencia = new DateTime(2023, 10, 3, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "Juan Pérez",
                            Notas = "Asistió puntualmente.",
                            TipoEvento = "Conferencia",
                            UbicacionEvento = "Salón A"
                        },
                        new
                        {
                            AsistenciaId = 2,
                            Asistio = false,
                            FechaHoraAsistencia = new DateTime(2023, 10, 4, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "María Rodríguez",
                            Notas = "No pudo asistir debido a un compromiso previo.",
                            TipoEvento = "Reunión",
                            UbicacionEvento = "Sala de juntas"
                        },
                        new
                        {
                            AsistenciaId = 3,
                            Asistio = true,
                            FechaHoraAsistencia = new DateTime(2023, 10, 5, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "Carlos González",
                            Notas = "Participó activamente en el taller.",
                            TipoEvento = "Taller",
                            UbicacionEvento = "Aula 101"
                        },
                        new
                        {
                            AsistenciaId = 4,
                            Asistio = true,
                            FechaHoraAsistencia = new DateTime(2023, 10, 6, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "Ana López",
                            Notas = "Tomó notas detalladas durante la conferencia.",
                            TipoEvento = "Conferencia",
                            UbicacionEvento = "Salón B"
                        },
                        new
                        {
                            AsistenciaId = 5,
                            Asistio = true,
                            FechaHoraAsistencia = new DateTime(2023, 10, 7, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "Pedro Ramírez",
                            Notas = "Participó en la discusión de temas importantes.",
                            TipoEvento = "Reunión",
                            UbicacionEvento = "Sala de conferencias"
                        },
                        new
                        {
                            AsistenciaId = 6,
                            Asistio = true,
                            FechaHoraAsistencia = new DateTime(2023, 10, 8, 11, 45, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "Laura Martínez",
                            Notas = "Hizo preguntas interesantes durante el seminario.",
                            TipoEvento = "Seminario",
                            UbicacionEvento = "Auditorio"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Notas.Estadisticas", b =>
                {
                    b.Property<int>("EstadisticaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstadisticaId"));

                    b.Property<int>("AñoEscolar")
                        .HasColumnType("int");

                    b.Property<int>("CantidadExamenes")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Materia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("NotaMaxima")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NotaMinima")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NotaPromedio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PeriodoEscolar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EstadisticaId");

                    b.ToTable("Estadisticas");

                    b.HasData(
                        new
                        {
                            EstadisticaId = 1,
                            AñoEscolar = 2023,
                            CantidadExamenes = 5,
                            FechaRegistro = new DateTime(2024, 2, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(4020),
                            Materia = "Matemáticas",
                            NotaMaxima = 9.0m,
                            NotaMinima = 7.5m,
                            NotaPromedio = 8.5m,
                            PeriodoEscolar = "Primer Trimestre"
                        },
                        new
                        {
                            EstadisticaId = 2,
                            AñoEscolar = 2023,
                            CantidadExamenes = 4,
                            FechaRegistro = new DateTime(2024, 2, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(4024),
                            Materia = "Ciencias",
                            NotaMaxima = 8.5m,
                            NotaMinima = 6.5m,
                            NotaPromedio = 7.8m,
                            PeriodoEscolar = "Segundo Trimestre"
                        },
                        new
                        {
                            EstadisticaId = 3,
                            AñoEscolar = 2023,
                            CantidadExamenes = 3,
                            FechaRegistro = new DateTime(2024, 2, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(4026),
                            Materia = "Historia",
                            NotaMaxima = 9.5m,
                            NotaMinima = 8.5m,
                            NotaPromedio = 9.2m,
                            PeriodoEscolar = "Tercer Trimestre"
                        },
                        new
                        {
                            EstadisticaId = 4,
                            AñoEscolar = 2023,
                            CantidadExamenes = 5,
                            FechaRegistro = new DateTime(2024, 2, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(4028),
                            Materia = "Lenguaje",
                            NotaMaxima = 8.0m,
                            NotaMinima = 6.0m,
                            NotaPromedio = 7.2m,
                            PeriodoEscolar = "Primer Semestre"
                        },
                        new
                        {
                            EstadisticaId = 5,
                            AñoEscolar = 2023,
                            CantidadExamenes = 2,
                            FechaRegistro = new DateTime(2024, 2, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(4029),
                            Materia = "Arte",
                            NotaMaxima = 9.0m,
                            NotaMinima = 8.0m,
                            NotaPromedio = 8.7m,
                            PeriodoEscolar = "Segundo Semestre"
                        },
                        new
                        {
                            EstadisticaId = 6,
                            AñoEscolar = 2023,
                            CantidadExamenes = 3,
                            FechaRegistro = new DateTime(2024, 2, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(4031),
                            Materia = "Educación Física",
                            NotaMaxima = 10.0m,
                            NotaMinima = 9.0m,
                            NotaPromedio = 9.5m,
                            PeriodoEscolar = "Trimestre Extra"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Notas.Notas", b =>
                {
                    b.Property<int>("NotaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotaId"));

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Materia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Periodo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Valor")
                        .HasColumnType("int");

                    b.HasKey("NotaId");

                    b.ToTable("Notas");

                    b.HasData(
                        new
                        {
                            NotaId = 1,
                            FechaCreacion = new DateTime(2024, 2, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(4441),
                            Materia = "Matemáticas",
                            Periodo = "Primer Semestre",
                            Titulo = "Examen de Matemáticas",
                            Valor = 85
                        },
                        new
                        {
                            NotaId = 2,
                            FechaCreacion = new DateTime(2024, 2, 14, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(4443),
                            Materia = "Ciencias",
                            Periodo = "Segundo Semestre",
                            Titulo = "Proyecto de Ciencias",
                            Valor = 92
                        },
                        new
                        {
                            NotaId = 3,
                            FechaCreacion = new DateTime(2024, 2, 9, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(4445),
                            Materia = "Historia",
                            Periodo = "Primer Semestre",
                            Titulo = "Tarea de Historia",
                            Valor = 75
                        },
                        new
                        {
                            NotaId = 4,
                            FechaCreacion = new DateTime(2024, 2, 17, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(4447),
                            Materia = "Español",
                            Periodo = "Segundo Semestre",
                            Titulo = "Presentación de Español",
                            Valor = 88
                        },
                        new
                        {
                            NotaId = 5,
                            FechaCreacion = new DateTime(2024, 2, 12, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(4448),
                            Materia = "Inglés",
                            Periodo = "Primer Semestre",
                            Titulo = "Prueba de Inglés",
                            Valor = 95
                        });
                });

            modelBuilder.Entity("Entities.Models.Matricula", b =>
                {
                    b.Property<Guid>("MatriculaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoriaMatricula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comentarios")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoMatricula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaMatricula")
                        .HasColumnType("datetime2");

                    b.Property<string>("InformacionPlanEstudios")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PeriodoAcademico")
                        .HasColumnType("int");

                    b.Property<string>("RegistroCambios")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoMatricula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MatriculaId");

                    b.ToTable("Matricula");

                    b.HasData(
                        new
                        {
                            MatriculaId = new Guid("2daaa313-7543-4eb2-8b04-256e6b7811ec"),
                            CategoriaMatricula = "Estudiante de Tiempo Completo",
                            Comentarios = "Comentario sobre la matrícula 1",
                            EstadoMatricula = "Activa",
                            FechaMatricula = new DateTime(2024, 2, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(2543),
                            InformacionPlanEstudios = "Plan de estudios 2023",
                            PeriodoAcademico = 2024,
                            RegistroCambios = "Registro de cambios 1",
                            TipoMatricula = "Matrícula Regular"
                        },
                        new
                        {
                            MatriculaId = new Guid("4be17872-8364-4cf1-aa0d-e0263891d79a"),
                            CategoriaMatricula = "Estudiante de Tiempo Parcial",
                            Comentarios = "Comentario sobre la matrícula 2",
                            EstadoMatricula = "Pendiente",
                            FechaMatricula = new DateTime(2024, 3, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(2549),
                            InformacionPlanEstudios = "Plan de estudios 2023",
                            PeriodoAcademico = 2024,
                            RegistroCambios = "Registro de cambios 2",
                            TipoMatricula = "Matrícula Parcial"
                        },
                        new
                        {
                            MatriculaId = new Guid("787ad770-e8e8-4176-a5a7-1f1e639e7267"),
                            CategoriaMatricula = "Estudiante Internacional",
                            Comentarios = "Comentario sobre la matrícula 3",
                            EstadoMatricula = "Cancelada",
                            FechaMatricula = new DateTime(2024, 4, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(2553),
                            InformacionPlanEstudios = "Plan de estudios 2023",
                            PeriodoAcademico = 2024,
                            RegistroCambios = "Registro de cambios 3",
                            TipoMatricula = "Matrícula Regular"
                        },
                        new
                        {
                            MatriculaId = new Guid("4b0f87af-09fe-4323-a040-56fee7542b76"),
                            CategoriaMatricula = "Estudiante de Tiempo Completo",
                            Comentarios = "Comentario sobre la matrícula 4",
                            EstadoMatricula = "Activa",
                            FechaMatricula = new DateTime(2024, 5, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(2556),
                            InformacionPlanEstudios = "Plan de estudios 2023",
                            PeriodoAcademico = 2024,
                            RegistroCambios = "Registro de cambios 4",
                            TipoMatricula = "Matrícula Regular"
                        },
                        new
                        {
                            MatriculaId = new Guid("b4ae983c-6fb7-40f3-b646-b4061b594c71"),
                            CategoriaMatricula = "Estudiante de Tiempo Completo",
                            Comentarios = "Comentario sobre la matrícula 5",
                            EstadoMatricula = "Activa",
                            FechaMatricula = new DateTime(2024, 6, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(2563),
                            InformacionPlanEstudios = "Plan de estudios 2023",
                            PeriodoAcademico = 2024,
                            RegistroCambios = "Registro de cambios 5",
                            TipoMatricula = "Matrícula Regular"
                        });
                });

            modelBuilder.Entity("Entities.Models.PreMatricula", b =>
                {
                    b.Property<Guid>("PreMatriculaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EstadoPreMatricula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GradoONivel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequisitosDocumentacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Turno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PreMatriculaId");

                    b.ToTable("PreMatricula");

                    b.HasData(
                        new
                        {
                            PreMatriculaId = new Guid("d66dcd25-bd61-4aa1-a669-f008f0dbff0a"),
                            EstadoPreMatricula = "Pendiente",
                            GradoONivel = "Quinto de Primaria",
                            Observaciones = "Estudiante con requerimientos especiales.",
                            RequisitosDocumentacion = "NoCumplio",
                            Turno = "Mañana"
                        },
                        new
                        {
                            PreMatriculaId = new Guid("2e772d8b-b869-43af-8095-f694ffd7b31b"),
                            EstadoPreMatricula = "Activa",
                            GradoONivel = "Séptimo de Secundaria",
                            Observaciones = "Estudiante de transferencia.",
                            RequisitosDocumentacion = "SiCumplio",
                            Turno = "Tarde"
                        },
                        new
                        {
                            PreMatriculaId = new Guid("47efefe3-4fc9-4682-a9d0-25aac2e228dc"),
                            EstadoPreMatricula = "Pendiente",
                            GradoONivel = "Tercero de Primaria",
                            Observaciones = "Estudiante extranjero.",
                            RequisitosDocumentacion = "SiCumplio",
                            Turno = "Mañana"
                        },
                        new
                        {
                            PreMatriculaId = new Guid("f4855af5-fb8c-42f3-8dc3-541cedf540c0"),
                            EstadoPreMatricula = "Activa",
                            GradoONivel = "Cuarto de Secundaria",
                            Observaciones = "Estudiante con beca deportiva.",
                            RequisitosDocumentacion = "SiCumplio",
                            Turno = "Tarde"
                        },
                        new
                        {
                            PreMatriculaId = new Guid("6eafd1fc-3379-4c8d-889a-f75f6741dfe5"),
                            EstadoPreMatricula = "Activa",
                            GradoONivel = "Segundo de Primaria",
                            Observaciones = "Estudiante con discapacidad visual.",
                            RequisitosDocumentacion = "SiCumplio",
                            Turno = "Mañana"
                        },
                        new
                        {
                            PreMatriculaId = new Guid("9e46efb0-0039-4061-a97b-4a4a9361e556"),
                            EstadoPreMatricula = "Pendiente",
                            GradoONivel = "Octavo de Secundaria",
                            Observaciones = "Estudiante sin observaciones adicionales.",
                            RequisitosDocumentacion = "Si cumplio",
                            Turno = "Tarde"
                        });
                });

            modelBuilder.Entity("Entities.Models.RespuestaCupo", b =>
                {
                    b.Property<Guid>("RespuestaCupoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("DuracionRespuesta")
                        .HasColumnType("time");

                    b.Property<string>("EstadoRespuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaRespuesta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaVencimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("MensajeRespuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prioridad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoRespuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioRespuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RespuestaCupoId");

                    b.ToTable("RespuestaCupo");

                    b.HasData(
                        new
                        {
                            RespuestaCupoId = new Guid("35f4796d-4573-4e55-a088-4f08b671e981"),
                            DuracionRespuesta = new TimeSpan(30, 0, 0, 0, 0),
                            EstadoRespuesta = "Aceptada",
                            FechaRespuesta = new DateTime(2024, 2, 20, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(2115),
                            FechaVencimiento = new DateTime(2024, 3, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(2121),
                            MensajeRespuesta = "Respuesta 1",
                            Prioridad = "Alta",
                            TipoRespuesta = "Aceptación",
                            UsuarioRespuesta = "Usuario1"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("9418f2fd-3259-4d54-b905-2a82e5d2d215"),
                            DuracionRespuesta = new TimeSpan(45, 0, 0, 0, 0),
                            EstadoRespuesta = "Rechazada",
                            FechaRespuesta = new DateTime(2024, 2, 21, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(2126),
                            FechaVencimiento = new DateTime(2024, 4, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(2126),
                            MensajeRespuesta = "Respuesta 2",
                            Prioridad = "Media",
                            TipoRespuesta = "Rechazo",
                            UsuarioRespuesta = "Usuario2"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("c7c36963-19ba-42c6-ab8c-7d19f3239512"),
                            DuracionRespuesta = new TimeSpan(60, 0, 0, 0, 0),
                            EstadoRespuesta = "Pendiente",
                            FechaRespuesta = new DateTime(2024, 2, 22, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(2128),
                            FechaVencimiento = new DateTime(2024, 5, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(2129),
                            MensajeRespuesta = "Respuesta 3",
                            Prioridad = "Baja",
                            TipoRespuesta = "Pendiente",
                            UsuarioRespuesta = "Usuario3"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("117a885c-6936-4347-9896-221f19d34882"),
                            DuracionRespuesta = new TimeSpan(30, 0, 0, 0, 0),
                            EstadoRespuesta = "Aceptada",
                            FechaRespuesta = new DateTime(2024, 2, 23, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(2133),
                            FechaVencimiento = new DateTime(2024, 6, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(2133),
                            MensajeRespuesta = "Respuesta 4",
                            Prioridad = "Alta",
                            TipoRespuesta = "Aceptación",
                            UsuarioRespuesta = "Usuario4"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("8800a2c9-a720-4ac3-8bed-33e2d8432d4f"),
                            DuracionRespuesta = new TimeSpan(45, 0, 0, 0, 0),
                            EstadoRespuesta = "Rechazada",
                            FechaRespuesta = new DateTime(2024, 2, 24, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(2135),
                            FechaVencimiento = new DateTime(2024, 7, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(2136),
                            MensajeRespuesta = "Respuesta 5",
                            Prioridad = "Media",
                            TipoRespuesta = "Rechazo",
                            UsuarioRespuesta = "Usuario5"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("328582eb-e621-41cf-a3f4-e6052673160a"),
                            DuracionRespuesta = new TimeSpan(30, 0, 0, 0, 0),
                            EstadoRespuesta = "Aceptada",
                            FechaRespuesta = new DateTime(2024, 2, 25, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(2137),
                            FechaVencimiento = new DateTime(2024, 8, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(2138),
                            MensajeRespuesta = "Respuesta 6",
                            Prioridad = "Alta",
                            TipoRespuesta = "Aceptación",
                            UsuarioRespuesta = "Usuario6"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("8bfecef6-d72e-4971-9ac9-22de94ecc2fc"),
                            DuracionRespuesta = new TimeSpan(45, 0, 0, 0, 0),
                            EstadoRespuesta = "Rechazada",
                            FechaRespuesta = new DateTime(2024, 2, 26, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(2140),
                            FechaVencimiento = new DateTime(2024, 9, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(2140),
                            MensajeRespuesta = "Respuesta 7",
                            Prioridad = "Media",
                            TipoRespuesta = "Rechazo",
                            UsuarioRespuesta = "Usuario7"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("ba4f11a7-aec0-4906-afcc-d8a428e272f3"),
                            DuracionRespuesta = new TimeSpan(60, 0, 0, 0, 0),
                            EstadoRespuesta = "Pendiente",
                            FechaRespuesta = new DateTime(2024, 2, 27, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(2142),
                            FechaVencimiento = new DateTime(2024, 10, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(2143),
                            MensajeRespuesta = "Respuesta 8",
                            Prioridad = "Baja",
                            TipoRespuesta = "Pendiente",
                            UsuarioRespuesta = "Usuario8"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("5949b24b-610d-40ae-b2f5-3d2b3bac1f68"),
                            DuracionRespuesta = new TimeSpan(30, 0, 0, 0, 0),
                            EstadoRespuesta = "Aceptada",
                            FechaRespuesta = new DateTime(2024, 2, 28, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(2144),
                            FechaVencimiento = new DateTime(2024, 11, 19, 11, 46, 34, 247, DateTimeKind.Local).AddTicks(2145),
                            MensajeRespuesta = "Respuesta 9",
                            Prioridad = "Alta",
                            TipoRespuesta = "Aceptación",
                            UsuarioRespuesta = "Usuario9"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
