// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace SRUNPE.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20230920005517_001")]
    partial class _001
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.D_Acudiente.Acudiente", b =>
                {
                    b.Property<Guid>("AcudienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Apellidos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorreoElectronico")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<string>("EstadoCivil")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroIdentificacion")
                        .HasColumnType("int");

                    b.Property<string>("Ocupacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelacionConEstudiante")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcudienteId");

                    b.ToTable("Acudiente");

                    b.HasData(
                        new
                        {
                            AcudienteId = new Guid("b0b5678d-0205-401c-a7a1-f1b5ac70f19c"),
                            Apellidos = "Pérez",
                            CorreoElectronico = "maria.perez@email.com",
                            Estado = true,
                            EstadoCivil = "Casada",
                            FechaNacimiento = new DateTime(1980, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2023, 9, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(2151),
                            Genero = "Femenino",
                            Nombres = "María",
                            NumeroIdentificacion = 12345,
                            Ocupacion = "Ingeniera",
                            RelacionConEstudiante = "Madre"
                        },
                        new
                        {
                            AcudienteId = new Guid("f4f4a2a6-d65d-45c5-9a42-8fc1d84f8b10"),
                            Apellidos = "González",
                            CorreoElectronico = "juan.gonzalez@email.com",
                            Estado = true,
                            EstadoCivil = "Soltero",
                            FechaNacimiento = new DateTime(1975, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2023, 9, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(2158),
                            Genero = "Masculino",
                            Nombres = "Juan",
                            NumeroIdentificacion = 67890,
                            Ocupacion = "Abogado",
                            RelacionConEstudiante = "Padre"
                        },
                        new
                        {
                            AcudienteId = new Guid("c89b82db-fab8-4981-810a-f2ee059c9edb"),
                            Apellidos = "López",
                            CorreoElectronico = "ana.lopez@email.com",
                            Estado = true,
                            EstadoCivil = "Divorciada",
                            FechaNacimiento = new DateTime(1990, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2023, 9, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(2161),
                            Genero = "Femenino",
                            Nombres = "Ana",
                            NumeroIdentificacion = 54321,
                            Ocupacion = "Médica",
                            RelacionConEstudiante = "Tutor Legal"
                        },
                        new
                        {
                            AcudienteId = new Guid("14916451-864e-4082-99da-59be86714103"),
                            Apellidos = "Martínez",
                            CorreoElectronico = "pedro.martinez@email.com",
                            Estado = true,
                            EstadoCivil = "Casado",
                            FechaNacimiento = new DateTime(1988, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2023, 9, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(2164),
                            Genero = "Masculino",
                            Nombres = "Pedro",
                            NumeroIdentificacion = 98765,
                            Ocupacion = "Profesor",
                            RelacionConEstudiante = "Padre"
                        },
                        new
                        {
                            AcudienteId = new Guid("6dbd98a4-5f1f-40d3-85ad-2c5c05e7f4f3"),
                            Apellidos = "Sánchez",
                            CorreoElectronico = "luis.sanchez@email.com",
                            Estado = true,
                            EstadoCivil = "Casado",
                            FechaNacimiento = new DateTime(1972, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2023, 9, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(2166),
                            Genero = "Masculino",
                            Nombres = "Luis",
                            NumeroIdentificacion = 13579,
                            Ocupacion = "Contador",
                            RelacionConEstudiante = "Padre"
                        },
                        new
                        {
                            AcudienteId = new Guid("4fe4e135-70ae-4e05-960f-89fd3e643202"),
                            Apellidos = "Rodríguez",
                            CorreoElectronico = "carlos.rodriguez@email.com",
                            Estado = true,
                            EstadoCivil = "Soltero",
                            FechaNacimiento = new DateTime(1985, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2023, 9, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(2168),
                            Genero = "Masculino",
                            Nombres = "Carlos",
                            NumeroIdentificacion = 24680,
                            Ocupacion = "Ingeniero Civil",
                            RelacionConEstudiante = "Tío"
                        },
                        new
                        {
                            AcudienteId = new Guid("f8c81da2-1f61-4ab3-85ed-53d0156294ee"),
                            Apellidos = "Gómez",
                            CorreoElectronico = "laura.gomez@email.com",
                            Estado = true,
                            EstadoCivil = "Divorciada",
                            FechaNacimiento = new DateTime(1992, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2023, 9, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(2170),
                            Genero = "Femenino",
                            Nombres = "Laura",
                            NumeroIdentificacion = 86420,
                            Ocupacion = "Médica",
                            RelacionConEstudiante = "Madre"
                        },
                        new
                        {
                            AcudienteId = new Guid("4f5c20ae-75e7-4b08-bd95-741a78985ece"),
                            Apellidos = "Hernández",
                            CorreoElectronico = "andres.hernandez@email.com",
                            Estado = true,
                            EstadoCivil = "Casado",
                            FechaNacimiento = new DateTime(1979, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2023, 9, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(2172),
                            Genero = "Masculino",
                            Nombres = "Andrés",
                            NumeroIdentificacion = 97531,
                            Ocupacion = "Arquitecto",
                            RelacionConEstudiante = "Padrino"
                        },
                        new
                        {
                            AcudienteId = new Guid("b378a83e-5620-46a3-80fe-32c8861faf0a"),
                            Apellidos = "Díaz",
                            CorreoElectronico = "sofia.diaz@email.com",
                            Estado = true,
                            EstadoCivil = "Soltera",
                            FechaNacimiento = new DateTime(1987, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2023, 9, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(2174),
                            Genero = "Femenino",
                            Nombres = "Sofía",
                            NumeroIdentificacion = 75319,
                            Ocupacion = "Profesora",
                            RelacionConEstudiante = "Tía"
                        },
                        new
                        {
                            AcudienteId = new Guid("84521c97-adfc-45ac-b37e-588105fc0253"),
                            Apellidos = "Luna",
                            CorreoElectronico = "roberto.luna@email.com",
                            Estado = true,
                            EstadoCivil = "Viudo",
                            FechaNacimiento = new DateTime(1970, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2023, 9, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(2178),
                            Genero = "Masculino",
                            Nombres = "Roberto",
                            NumeroIdentificacion = 10293,
                            Ocupacion = "Jubilado",
                            RelacionConEstudiante = "Abuelo"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Acudiente.DireccionAcudiente", b =>
                {
                    b.Property<Guid>("DireccionAcudienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcudienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Calle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CiudadLocalidad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CodigoPostal")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ColoniaBarrio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EstadoProvincia")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DireccionAcudienteId");

                    b.ToTable("DireccionAcudiente");

                    b.HasData(
                        new
                        {
                            DireccionAcudienteId = new Guid("588c0765-72a7-41d7-b564-d698eb3b7a55"),
                            AcudienteId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Calle = "Calle 72",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110231",
                            ColoniaBarrio = "Chapinero",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("e68fc3d3-ba06-451f-86fc-1a82e1db8fdf"),
                            AcudienteId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Calle = "Calle 72",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110231",
                            ColoniaBarrio = "Chapinero",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("bc946c76-e037-4259-8509-ddd6714c695e"),
                            AcudienteId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Calle = "Carrera 10",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110321",
                            ColoniaBarrio = "La Candelaria",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("dcfda25c-4b14-4c5f-982f-723b93905ab0"),
                            AcudienteId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Calle = "Avenida Boyacá",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110511",
                            ColoniaBarrio = "Fontibón",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("9cf9cef0-9007-4966-b767-4eb36332475d"),
                            AcudienteId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Calle = "Calle 80",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110841",
                            ColoniaBarrio = "Engativá",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("9b60cad5-2509-445b-aca9-86e2d36a1c77"),
                            AcudienteId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Calle = "Carrera 7",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110171",
                            ColoniaBarrio = "Usaquén",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("055cdf5f-1bbb-496c-bfd5-af1da659c01c"),
                            AcudienteId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Calle = "Avenida 68",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110841",
                            ColoniaBarrio = "Kennedy",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Estudiante.CandidatoEstudiante", b =>
                {
                    b.Property<Guid>("CandidatoEstudianteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("TipoPersona")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CandidatoEstudianteId");

                    b.ToTable("CandidatoEstudiantes");

                    b.HasData(
                        new
                        {
                            CandidatoEstudianteId = new Guid("088ac4bf-e1ac-45c9-b587-3e76c18ff184"),
                            Apellido = "Acuña",
                            FechaNacimiento = new DateTime(1995, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Axl",
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("6139564b-37eb-430d-8ad3-cfd365e68d17"),
                            Apellido = "Castro",
                            FechaNacimiento = new DateTime(1990, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Juan",
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("1103d5a3-567c-42e0-9ba1-90b2dbecfc78"),
                            Apellido = "Sánchez",
                            FechaNacimiento = new DateTime(1987, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Carlos",
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("638e6e3d-06fb-4cf1-9098-5db1820078f4"),
                            Apellido = "López",
                            FechaNacimiento = new DateTime(2000, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Laura",
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("395822b7-a456-45a0-bea8-af50ce2aa67d"),
                            Apellido = "Ramírez",
                            FechaNacimiento = new DateTime(1998, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Pedro",
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("ddae919b-46fe-4102-bea1-22a2c1481199"),
                            Apellido = "Martínez",
                            FechaNacimiento = new DateTime(1993, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Ana",
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("d9412190-0da6-4485-9538-c6108dbd604a"),
                            Apellido = "Fernández",
                            FechaNacimiento = new DateTime(1989, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Roberto",
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("804dacc5-00d3-4169-aa74-0099f89d822d"),
                            Apellido = "Gómez",
                            FechaNacimiento = new DateTime(1996, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Isabel",
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("a7407eac-9489-4692-9047-ab65d677d1e0"),
                            Apellido = "Díaz",
                            FechaNacimiento = new DateTime(1991, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Francisco",
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("d92cc1cd-957a-4aeb-809b-41f0f05a1ad7"),
                            Apellido = "Hernández",
                            FechaNacimiento = new DateTime(1994, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Sofía",
                            TipoPersona = "Estudiante"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Estudiante.Cupo", b =>
                {
                    b.Property<Guid>("CupoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidatoEstudianteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CantidadDisponible")
                        .HasColumnType("int");

                    b.Property<string>("Comentarios")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duracion")
                        .HasColumnType("time");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ubicacion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CupoId");

                    b.ToTable("Cupo");

                    b.HasData(
                        new
                        {
                            CupoId = new Guid("b348931a-9638-4c58-8fd6-ad8b0512dc1a"),
                            CandidatoEstudianteId = new Guid("540e0c88-9bff-4a91-a34e-23d7c1915583"),
                            CantidadDisponible = 10,
                            Comentarios = "Cupo para estudiantes universitarios",
                            Descripcion = "Cupo para el evento principal",
                            Duracion = new TimeSpan(0, 2, 0, 0, 0),
                            Estado = true,
                            FechaFin = new DateTime(2023, 10, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(2804),
                            FechaInicio = new DateTime(2023, 9, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(2803),
                            Ubicacion = "Salón principal"
                        },
                        new
                        {
                            CupoId = new Guid("99c6e336-c81c-4e49-95ad-8ca4bcf981d2"),
                            CandidatoEstudianteId = new Guid("e7cad3c2-d134-4215-af9a-5b765744b964"),
                            CantidadDisponible = 5,
                            Comentarios = "Cupo para desarrolladores junior",
                            Descripcion = "Cupo para el taller de programación",
                            Duracion = new TimeSpan(0, 3, 0, 0, 0),
                            Estado = true,
                            FechaFin = new DateTime(2023, 11, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(2816),
                            FechaInicio = new DateTime(2023, 9, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(2815),
                            Ubicacion = "Aula 101"
                        },
                        new
                        {
                            CupoId = new Guid("8b73345b-dbcc-4307-8cec-92e3c03e3154"),
                            CandidatoEstudianteId = new Guid("2c25d8c9-c19f-41a1-ad8c-d1ea143be1f8"),
                            CantidadDisponible = 20,
                            Comentarios = "Cupo para profesionales de marketing",
                            Descripcion = "Cupo para el seminario de marketing",
                            Duracion = new TimeSpan(0, 4, 0, 0, 0),
                            Estado = true,
                            FechaFin = new DateTime(2023, 12, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(2819),
                            FechaInicio = new DateTime(2023, 9, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(2818),
                            Ubicacion = "Aula 102"
                        },
                        new
                        {
                            CupoId = new Guid("0ffde711-e5b6-415c-9688-7576b2936f05"),
                            CandidatoEstudianteId = new Guid("45c05980-18f8-4d72-81e5-8b25ae3d5b73"),
                            CantidadDisponible = 15,
                            Comentarios = "Cupo para diseñadores creativos",
                            Descripcion = "Cupo para el curso de diseño gráfico",
                            Duracion = new TimeSpan(0, 2, 0, 0, 0),
                            Estado = true,
                            FechaFin = new DateTime(2024, 1, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(2824),
                            FechaInicio = new DateTime(2023, 9, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(2823),
                            Ubicacion = "Aula 103"
                        },
                        new
                        {
                            CupoId = new Guid("a4679b4b-79e8-4a90-88c5-43372ad78186"),
                            CandidatoEstudianteId = new Guid("3061c8ff-d37e-4aef-b289-fff7ff116990"),
                            CantidadDisponible = 30,
                            Comentarios = "Cupo para establecer contactos profesionales",
                            Descripcion = "Cupo para el evento de networking",
                            Duracion = new TimeSpan(0, 1, 0, 0, 0),
                            Estado = true,
                            FechaFin = new DateTime(2024, 2, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(2827),
                            FechaInicio = new DateTime(2023, 9, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(2827),
                            Ubicacion = "Aula 104"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Estudiante.EstudianteDocumentos", b =>
                {
                    b.Property<Guid>("EstudianteDocumentosId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidatoEstudianteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreDocumento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroDocumento")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tamaño")
                        .HasColumnType("int");

                    b.Property<string>("TipoDocumento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ubicacion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EstudianteDocumentosId");

                    b.ToTable("EstudianteDocumentos");

                    b.HasData(
                        new
                        {
                            EstudianteDocumentosId = new Guid("6a30c846-4b9d-4cf5-bb17-051a3e9d1b72"),
                            CandidatoEstudianteId = new Guid("c9d4c053-49b6-410c-bc78-2d54a999187f"),
                            Estado = true,
                            NombreDocumento = "Certificado de Nacimiento",
                            NumeroDocumento = 61464465,
                            Observaciones = "Ninguna",
                            Tamaño = 1024,
                            TipoDocumento = "Identificación",
                            Ubicacion = "ruta/al/documento1"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("2d54a999-187f-4a8c-99db-d17841e7938c"),
                            CandidatoEstudianteId = new Guid("3d490a70-94ce-4d15-9494-5248280c2ce3"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2023, 9, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(1908),
                            NombreDocumento = "Diploma",
                            NumeroDocumento = 987654,
                            Observaciones = "Logros académicos",
                            Tamaño = 2048,
                            TipoDocumento = "Educativo",
                            Ubicacion = "ruta/al/documento2"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("3e68515e-3a47-4a62-a8c7-9f12242d020e"),
                            CandidatoEstudianteId = new Guid("4f3657e5-5824-47b8-b4cd-6f49a3f4dbf1"),
                            Estado = false,
                            FechaActualizacion = new DateTime(2023, 9, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(1922),
                            NombreDocumento = "Certificado de Graduación",
                            NumeroDocumento = 123456,
                            Observaciones = "Graduación universitaria",
                            Tamaño = 1536,
                            TipoDocumento = "Educativo",
                            Ubicacion = "ruta/al/documento3"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("4a303cce-8c0e-4ae7-89c1-067d0b7741b6"),
                            CandidatoEstudianteId = new Guid("3e68515e-3a47-4a62-a8c7-9f12242d020e"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2023, 9, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(1926),
                            NombreDocumento = "Certificado de Matrícula",
                            NumeroDocumento = 789012,
                            Observaciones = "Matrícula escolar",
                            Tamaño = 8192,
                            TipoDocumento = "Educativo",
                            Ubicacion = "ruta/al/documento4"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("5f78d0e1-579e-4dfc-82a1-92010b4191d3"),
                            CandidatoEstudianteId = new Guid("31eb541a-9419-4eac-bf1b-0289a6c6f6f0"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2023, 9, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(1931),
                            NombreDocumento = "Cédula de Identidad",
                            NumeroDocumento = 555555,
                            Observaciones = "Documento oficial",
                            Tamaño = 4096,
                            TipoDocumento = "Identificación",
                            Ubicacion = "ruta/al/documento5"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("f38f6b1a-86e9-4d9d-8a7a-62f17e6f1ba2"),
                            CandidatoEstudianteId = new Guid("7f255218-f8e0-45a9-9807-12e1bcfd438c"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2023, 9, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(1934),
                            NombreDocumento = "Carné de Estudiante",
                            NumeroDocumento = 7890123,
                            Observaciones = "Carné escolar",
                            Tamaño = 3072,
                            TipoDocumento = "Identificación",
                            Ubicacion = "ruta/al/documento6"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("7e15d9a4-98cb-4d14-9a35-862f8c202725"),
                            CandidatoEstudianteId = new Guid("bb9b0679-4f04-4ac4-9ddc-5c3e50e81298"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2023, 9, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(1936),
                            NombreDocumento = "Boleta de Calificaciones",
                            NumeroDocumento = 9876543,
                            Observaciones = "Registro académico",
                            Tamaño = 5120,
                            TipoDocumento = "Educativo",
                            Ubicacion = "ruta/al/documento7"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("8f4a67c2-fd5e-4316-8c50-7249f159d0f1"),
                            CandidatoEstudianteId = new Guid("a6509bea-688e-43b5-a870-6ee461ccf601"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2023, 9, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(1938),
                            NombreDocumento = "Pasaporte",
                            NumeroDocumento = 1234567,
                            Observaciones = "Documento de viaje",
                            Tamaño = 4096,
                            TipoDocumento = "Identificación",
                            Ubicacion = "ruta/al/documento8"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("9b9d6d8f-72f0-4f0a-8e18-1e75b0182e3f"),
                            CandidatoEstudianteId = new Guid("db9fcac5-8654-45c3-87c7-8b5e13e9e6c2"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2023, 9, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(1941),
                            NombreDocumento = "Certificado Médico",
                            NumeroDocumento = 543210,
                            Observaciones = "Informe médico",
                            Tamaño = 2048,
                            TipoDocumento = "Salud",
                            Ubicacion = "ruta/al/documento9"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("10a5e754-1570-4be0-8650-2c53d7cfb4d3"),
                            CandidatoEstudianteId = new Guid("b3b5a5a7-5b82-4f76-98c1-654589db8f61"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2023, 9, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(1943),
                            NombreDocumento = "Fotografía del Estudiante",
                            NumeroDocumento = 1111111,
                            Observaciones = "Foto de perfil",
                            Tamaño = 1024,
                            TipoDocumento = "Identificación",
                            Ubicacion = "ruta/al/documento10"
                        });
                });

            modelBuilder.Entity("Entities.Models.Matricula", b =>
                {
                    b.Property<Guid>("MatriculaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoriaMatricula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comentarios")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoMatricula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaMatricula")
                        .HasColumnType("datetime2");

                    b.Property<string>("InformacionPlanEstudios")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PeriodoAcademico")
                        .HasColumnType("int");

                    b.Property<string>("RegistroCambios")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoMatricula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MatriculaId");

                    b.ToTable("Matricula");

                    b.HasData(
                        new
                        {
                            MatriculaId = new Guid("14f42d9e-06c2-4900-8257-df235dc74760"),
                            CategoriaMatricula = "Estudiante de Tiempo Completo",
                            Comentarios = "Comentario sobre la matrícula 1",
                            EstadoMatricula = "Activa",
                            FechaMatricula = new DateTime(2023, 9, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(3443),
                            InformacionPlanEstudios = "Plan de estudios 2023",
                            PeriodoAcademico = 2023,
                            RegistroCambios = "Registro de cambios 1",
                            TipoMatricula = "Matrícula Regular"
                        },
                        new
                        {
                            MatriculaId = new Guid("f95e7730-3074-46c4-89c9-525682548f48"),
                            CategoriaMatricula = "Estudiante de Tiempo Parcial",
                            Comentarios = "Comentario sobre la matrícula 2",
                            EstadoMatricula = "Pendiente",
                            FechaMatricula = new DateTime(2023, 10, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(3448),
                            InformacionPlanEstudios = "Plan de estudios 2023",
                            PeriodoAcademico = 2023,
                            RegistroCambios = "Registro de cambios 2",
                            TipoMatricula = "Matrícula Parcial"
                        },
                        new
                        {
                            MatriculaId = new Guid("bbc21fcc-433a-4550-b0b0-94b1a799fb39"),
                            CategoriaMatricula = "Estudiante Internacional",
                            Comentarios = "Comentario sobre la matrícula 3",
                            EstadoMatricula = "Cancelada",
                            FechaMatricula = new DateTime(2023, 11, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(3450),
                            InformacionPlanEstudios = "Plan de estudios 2023",
                            PeriodoAcademico = 2023,
                            RegistroCambios = "Registro de cambios 3",
                            TipoMatricula = "Matrícula Regular"
                        },
                        new
                        {
                            MatriculaId = new Guid("28d35eda-1b85-4566-9477-e0c035523b6d"),
                            CategoriaMatricula = "Estudiante de Tiempo Completo",
                            Comentarios = "Comentario sobre la matrícula 4",
                            EstadoMatricula = "Activa",
                            FechaMatricula = new DateTime(2023, 12, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(3453),
                            InformacionPlanEstudios = "Plan de estudios 2023",
                            PeriodoAcademico = 2023,
                            RegistroCambios = "Registro de cambios 4",
                            TipoMatricula = "Matrícula Regular"
                        },
                        new
                        {
                            MatriculaId = new Guid("1424202b-7d11-417f-88c5-c79530798594"),
                            CategoriaMatricula = "Estudiante de Tiempo Completo",
                            Comentarios = "Comentario sobre la matrícula 5",
                            EstadoMatricula = "Activa",
                            FechaMatricula = new DateTime(2024, 1, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(3455),
                            InformacionPlanEstudios = "Plan de estudios 2023",
                            PeriodoAcademico = 2023,
                            RegistroCambios = "Registro de cambios 5",
                            TipoMatricula = "Matrícula Regular"
                        });
                });

            modelBuilder.Entity("Entities.Models.PreMatricula", b =>
                {
                    b.Property<Guid>("PreMatriculaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EstadoPreMatricula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GradoONivel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequisitosDocumentacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Turno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PreMatriculaId");

                    b.ToTable("PreMatricula");

                    b.HasData(
                        new
                        {
                            PreMatriculaId = new Guid("0b323115-dfc4-47bf-8926-1da6d57e27c4"),
                            EstadoPreMatricula = "Pendiente",
                            GradoONivel = "Quinto de Primaria",
                            Observaciones = "Estudiante con requerimientos especiales.",
                            RequisitosDocumentacion = "NoCumplio",
                            Turno = "Mañana"
                        },
                        new
                        {
                            PreMatriculaId = new Guid("519c43b4-ec15-421b-90ae-73102e017034"),
                            EstadoPreMatricula = "Activa",
                            GradoONivel = "Séptimo de Secundaria",
                            Observaciones = "Estudiante de transferencia.",
                            RequisitosDocumentacion = "SiCumplio",
                            Turno = "Tarde"
                        },
                        new
                        {
                            PreMatriculaId = new Guid("05d7a5db-3c4b-4aca-b5fc-08a8159706d7"),
                            EstadoPreMatricula = "Pendiente",
                            GradoONivel = "Tercero de Primaria",
                            Observaciones = "Estudiante extranjero.",
                            RequisitosDocumentacion = "SiCumplio",
                            Turno = "Mañana"
                        },
                        new
                        {
                            PreMatriculaId = new Guid("3c04a32b-03fa-4e75-96a5-e883e54e633e"),
                            EstadoPreMatricula = "Activa",
                            GradoONivel = "Cuarto de Secundaria",
                            Observaciones = "Estudiante con beca deportiva.",
                            RequisitosDocumentacion = "SiCumplio",
                            Turno = "Tarde"
                        },
                        new
                        {
                            PreMatriculaId = new Guid("46f647e0-853e-4b79-82bf-c751013f95a6"),
                            EstadoPreMatricula = "Activa",
                            GradoONivel = "Segundo de Primaria",
                            Observaciones = "Estudiante con discapacidad visual.",
                            RequisitosDocumentacion = "SiCumplio",
                            Turno = "Mañana"
                        },
                        new
                        {
                            PreMatriculaId = new Guid("8ebf3c17-f3ee-4e9f-b90c-1204be3e7b1c"),
                            EstadoPreMatricula = "Pendiente",
                            GradoONivel = "Octavo de Secundaria",
                            Observaciones = "Estudiante sin observaciones adicionales.",
                            RequisitosDocumentacion = "Si cumplio",
                            Turno = "Tarde"
                        });
                });

            modelBuilder.Entity("Entities.Models.RespuestaCupo", b =>
                {
                    b.Property<Guid>("RespuestaCupoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("DuracionRespuesta")
                        .HasColumnType("time");

                    b.Property<string>("EstadoRespuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaRespuesta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaVencimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("MensajeRespuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prioridad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoRespuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioRespuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RespuestaCupoId");

                    b.ToTable("RespuestaCupo");

                    b.HasData(
                        new
                        {
                            RespuestaCupoId = new Guid("08c5bb2c-f105-4746-9d1f-ef291ba77905"),
                            DuracionRespuesta = new TimeSpan(30, 0, 0, 0, 0),
                            EstadoRespuesta = "Aceptada",
                            FechaRespuesta = new DateTime(2023, 9, 20, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(3014),
                            FechaVencimiento = new DateTime(2023, 10, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(3023),
                            MensajeRespuesta = "Respuesta 1",
                            Prioridad = "Alta",
                            TipoRespuesta = "Aceptación",
                            UsuarioRespuesta = "Usuario1"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("4a36c0f6-0e4f-4669-b7e2-e6896c034533"),
                            DuracionRespuesta = new TimeSpan(45, 0, 0, 0, 0),
                            EstadoRespuesta = "Rechazada",
                            FechaRespuesta = new DateTime(2023, 9, 21, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(3028),
                            FechaVencimiento = new DateTime(2023, 11, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(3029),
                            MensajeRespuesta = "Respuesta 2",
                            Prioridad = "Media",
                            TipoRespuesta = "Rechazo",
                            UsuarioRespuesta = "Usuario2"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("2816aa8d-31e9-45cf-b087-bc9455258d91"),
                            DuracionRespuesta = new TimeSpan(60, 0, 0, 0, 0),
                            EstadoRespuesta = "Pendiente",
                            FechaRespuesta = new DateTime(2023, 9, 22, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(3030),
                            FechaVencimiento = new DateTime(2023, 12, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(3031),
                            MensajeRespuesta = "Respuesta 3",
                            Prioridad = "Baja",
                            TipoRespuesta = "Pendiente",
                            UsuarioRespuesta = "Usuario3"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("b9d3729f-8049-4282-8094-b3caa1c345ef"),
                            DuracionRespuesta = new TimeSpan(30, 0, 0, 0, 0),
                            EstadoRespuesta = "Aceptada",
                            FechaRespuesta = new DateTime(2023, 9, 23, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(3033),
                            FechaVencimiento = new DateTime(2024, 1, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(3034),
                            MensajeRespuesta = "Respuesta 4",
                            Prioridad = "Alta",
                            TipoRespuesta = "Aceptación",
                            UsuarioRespuesta = "Usuario4"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("976be678-906b-4ecd-9572-44ba3bcb856c"),
                            DuracionRespuesta = new TimeSpan(45, 0, 0, 0, 0),
                            EstadoRespuesta = "Rechazada",
                            FechaRespuesta = new DateTime(2023, 9, 24, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(3037),
                            FechaVencimiento = new DateTime(2024, 2, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(3038),
                            MensajeRespuesta = "Respuesta 5",
                            Prioridad = "Media",
                            TipoRespuesta = "Rechazo",
                            UsuarioRespuesta = "Usuario5"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("09ba4c9e-8606-4a52-aa65-5f5695962da0"),
                            DuracionRespuesta = new TimeSpan(30, 0, 0, 0, 0),
                            EstadoRespuesta = "Aceptada",
                            FechaRespuesta = new DateTime(2023, 9, 25, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(3039),
                            FechaVencimiento = new DateTime(2024, 3, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(3040),
                            MensajeRespuesta = "Respuesta 6",
                            Prioridad = "Alta",
                            TipoRespuesta = "Aceptación",
                            UsuarioRespuesta = "Usuario6"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("3b242839-797d-4ba0-9658-c680ed7963bd"),
                            DuracionRespuesta = new TimeSpan(45, 0, 0, 0, 0),
                            EstadoRespuesta = "Rechazada",
                            FechaRespuesta = new DateTime(2023, 9, 26, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(3042),
                            FechaVencimiento = new DateTime(2024, 4, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(3043),
                            MensajeRespuesta = "Respuesta 7",
                            Prioridad = "Media",
                            TipoRespuesta = "Rechazo",
                            UsuarioRespuesta = "Usuario7"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("43e65a26-0ab8-4bb5-b95a-79999650b930"),
                            DuracionRespuesta = new TimeSpan(60, 0, 0, 0, 0),
                            EstadoRespuesta = "Pendiente",
                            FechaRespuesta = new DateTime(2023, 9, 27, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(3044),
                            FechaVencimiento = new DateTime(2024, 5, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(3045),
                            MensajeRespuesta = "Respuesta 8",
                            Prioridad = "Baja",
                            TipoRespuesta = "Pendiente",
                            UsuarioRespuesta = "Usuario8"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("3e335b71-3492-4ec1-a342-85133733c076"),
                            DuracionRespuesta = new TimeSpan(30, 0, 0, 0, 0),
                            EstadoRespuesta = "Aceptada",
                            FechaRespuesta = new DateTime(2023, 9, 28, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(3047),
                            FechaVencimiento = new DateTime(2024, 6, 19, 19, 55, 17, 403, DateTimeKind.Local).AddTicks(3047),
                            MensajeRespuesta = "Respuesta 9",
                            Prioridad = "Alta",
                            TipoRespuesta = "Aceptación",
                            UsuarioRespuesta = "Usuario9"
                        });
                });

            modelBuilder.Entity("Entities.Models.TelefonoAcudiente", b =>
                {
                    b.Property<Guid>("TelefonoAcudienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AcudienteId")
                        .HasColumnType("int");

                    b.Property<string>("Indicativo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numero")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("TelefonoAcudienteId");

                    b.ToTable("TelefonoAcudiente");

                    b.HasData(
                        new
                        {
                            TelefonoAcudienteId = new Guid("50fd0c27-a9a5-498d-a3a5-2cc909e14db9"),
                            AcudienteId = 1,
                            Indicativo = "+1",
                            Numero = -4135,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("5f206690-0330-4f5b-83d3-702e2941c89b"),
                            AcudienteId = 2,
                            Indicativo = "+1",
                            Numero = -6975,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("bb978121-56ca-4328-b9b5-914b1c770fde"),
                            AcudienteId = 3,
                            Indicativo = "+1",
                            Numero = -5357,
                            Tipo = "Fijo"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("71bdf0de-175b-4353-818b-f60548dd5cf1"),
                            AcudienteId = 4,
                            Indicativo = "+1",
                            Numero = -5753,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("6f94f3eb-c94c-472c-bb06-f2b681cfedf5"),
                            AcudienteId = 5,
                            Indicativo = "+1",
                            Numero = 911,
                            Tipo = "Emergencia"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("55a93a85-4554-4062-8653-fe274f668bf1"),
                            AcudienteId = 1,
                            Indicativo = "+1",
                            Numero = -667,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("f45afba4-5184-4d73-87ac-ddf32cacc06c"),
                            AcudienteId = 2,
                            Indicativo = "+1",
                            Numero = -1889,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("7be3bbe2-2158-4a43-a022-83cf3cdd2d46"),
                            AcudienteId = 3,
                            Indicativo = "+1",
                            Numero = -3111,
                            Tipo = "Fijo"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("9709a9d1-d5d9-4734-b556-393530c5dd2a"),
                            AcudienteId = 4,
                            Indicativo = "+1",
                            Numero = -4333,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("d58a83de-6694-431b-90e5-98eca18473eb"),
                            AcudienteId = 5,
                            Indicativo = "+1",
                            Numero = -5555,
                            Tipo = "Emergencia"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
