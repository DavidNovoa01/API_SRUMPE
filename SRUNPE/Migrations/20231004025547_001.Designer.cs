// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace SRUNPE.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20231004025547_001")]
    partial class _001
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.D_Acudiente.Acudiente", b =>
                {
                    b.Property<Guid>("AcudienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Apellidos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorreoElectronico")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<string>("EstadoCivil")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroIdentificacion")
                        .HasColumnType("int");

                    b.Property<string>("Ocupacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelacionConEstudiante")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcudienteId");

                    b.ToTable("Acudiente");

                    b.HasData(
                        new
                        {
                            AcudienteId = new Guid("e5d768d1-095f-4dee-874b-e6acc40095c6"),
                            Apellidos = "Pérez",
                            CorreoElectronico = "maria.perez@email.com",
                            Estado = true,
                            EstadoCivil = "Casada",
                            FechaNacimiento = new DateTime(1980, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2023, 10, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(3725),
                            Genero = "Femenino",
                            Nombres = "María",
                            NumeroIdentificacion = 12345,
                            Ocupacion = "Ingeniera",
                            RelacionConEstudiante = "Madre"
                        },
                        new
                        {
                            AcudienteId = new Guid("8ea0367a-b1af-4ceb-8ed6-f858cedbb0b9"),
                            Apellidos = "González",
                            CorreoElectronico = "juan.gonzalez@email.com",
                            Estado = true,
                            EstadoCivil = "Soltero",
                            FechaNacimiento = new DateTime(1975, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2023, 10, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(3728),
                            Genero = "Masculino",
                            Nombres = "Juan",
                            NumeroIdentificacion = 67890,
                            Ocupacion = "Abogado",
                            RelacionConEstudiante = "Padre"
                        },
                        new
                        {
                            AcudienteId = new Guid("9857d5a1-398c-4cef-8c41-c9a2d4f4c4d6"),
                            Apellidos = "López",
                            CorreoElectronico = "ana.lopez@email.com",
                            Estado = true,
                            EstadoCivil = "Divorciada",
                            FechaNacimiento = new DateTime(1990, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2023, 10, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(3731),
                            Genero = "Femenino",
                            Nombres = "Ana",
                            NumeroIdentificacion = 54321,
                            Ocupacion = "Médica",
                            RelacionConEstudiante = "Tutor Legal"
                        },
                        new
                        {
                            AcudienteId = new Guid("6bc1af02-7773-4b20-bc8c-61af3df6fa7e"),
                            Apellidos = "Martínez",
                            CorreoElectronico = "pedro.martinez@email.com",
                            Estado = true,
                            EstadoCivil = "Casado",
                            FechaNacimiento = new DateTime(1988, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2023, 10, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(3733),
                            Genero = "Masculino",
                            Nombres = "Pedro",
                            NumeroIdentificacion = 98765,
                            Ocupacion = "Profesor",
                            RelacionConEstudiante = "Padre"
                        },
                        new
                        {
                            AcudienteId = new Guid("b2b91ee7-bb52-4c7b-9da0-8c92d3b707e9"),
                            Apellidos = "Sánchez",
                            CorreoElectronico = "luis.sanchez@email.com",
                            Estado = true,
                            EstadoCivil = "Casado",
                            FechaNacimiento = new DateTime(1972, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2023, 10, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(3735),
                            Genero = "Masculino",
                            Nombres = "Luis",
                            NumeroIdentificacion = 13579,
                            Ocupacion = "Contador",
                            RelacionConEstudiante = "Padre"
                        },
                        new
                        {
                            AcudienteId = new Guid("9dbc9d53-1ae0-40a5-a115-7eb348b0c608"),
                            Apellidos = "Rodríguez",
                            CorreoElectronico = "carlos.rodriguez@email.com",
                            Estado = true,
                            EstadoCivil = "Soltero",
                            FechaNacimiento = new DateTime(1985, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2023, 10, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(3737),
                            Genero = "Masculino",
                            Nombres = "Carlos",
                            NumeroIdentificacion = 24680,
                            Ocupacion = "Ingeniero Civil",
                            RelacionConEstudiante = "Tío"
                        },
                        new
                        {
                            AcudienteId = new Guid("5444a831-c368-444c-a00d-95376feae577"),
                            Apellidos = "Gómez",
                            CorreoElectronico = "laura.gomez@email.com",
                            Estado = true,
                            EstadoCivil = "Divorciada",
                            FechaNacimiento = new DateTime(1992, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2023, 10, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(3741),
                            Genero = "Femenino",
                            Nombres = "Laura",
                            NumeroIdentificacion = 86420,
                            Ocupacion = "Médica",
                            RelacionConEstudiante = "Madre"
                        },
                        new
                        {
                            AcudienteId = new Guid("670b49f3-92cd-4b50-90c8-9b6243237ac3"),
                            Apellidos = "Hernández",
                            CorreoElectronico = "andres.hernandez@email.com",
                            Estado = true,
                            EstadoCivil = "Casado",
                            FechaNacimiento = new DateTime(1979, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2023, 10, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(3743),
                            Genero = "Masculino",
                            Nombres = "Andrés",
                            NumeroIdentificacion = 97531,
                            Ocupacion = "Arquitecto",
                            RelacionConEstudiante = "Padrino"
                        },
                        new
                        {
                            AcudienteId = new Guid("c1d18c1c-7206-4c64-8697-95eaa774481b"),
                            Apellidos = "Díaz",
                            CorreoElectronico = "sofia.diaz@email.com",
                            Estado = true,
                            EstadoCivil = "Soltera",
                            FechaNacimiento = new DateTime(1987, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2023, 10, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(3745),
                            Genero = "Femenino",
                            Nombres = "Sofía",
                            NumeroIdentificacion = 75319,
                            Ocupacion = "Profesora",
                            RelacionConEstudiante = "Tía"
                        },
                        new
                        {
                            AcudienteId = new Guid("85905472-82b2-4b60-98b7-8d0861ac89f9"),
                            Apellidos = "Luna",
                            CorreoElectronico = "roberto.luna@email.com",
                            Estado = true,
                            EstadoCivil = "Viudo",
                            FechaNacimiento = new DateTime(1970, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2023, 10, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(3747),
                            Genero = "Masculino",
                            Nombres = "Roberto",
                            NumeroIdentificacion = 10293,
                            Ocupacion = "Jubilado",
                            RelacionConEstudiante = "Abuelo"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Acudiente.DireccionAcudiente", b =>
                {
                    b.Property<Guid>("DireccionAcudienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Calle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CiudadLocalidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoPostal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColoniaBarrio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoProvincia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DireccionAcudienteId");

                    b.ToTable("DireccionAcudiente");

                    b.HasData(
                        new
                        {
                            DireccionAcudienteId = new Guid("a0ee0ef7-4c11-43b3-8734-f22fd8214dd2"),
                            Calle = "Calle 72",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110231",
                            ColoniaBarrio = "Chapinero",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("6fb91c38-be05-4767-8996-a0498eb45f93"),
                            Calle = "Calle 72",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110231",
                            ColoniaBarrio = "Chapinero",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("0752a2b1-87bd-43a3-8935-23aab6b46e6c"),
                            Calle = "Carrera 10",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110321",
                            ColoniaBarrio = "La Candelaria",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("21a55e75-ef27-4bee-a5be-55611f8d88fe"),
                            Calle = "Avenida Boyacá",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110511",
                            ColoniaBarrio = "Fontibón",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("c0a7c644-4130-498f-8fc4-0fcf82ac1950"),
                            Calle = "Calle 80",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110841",
                            ColoniaBarrio = "Engativá",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("4ddf8a43-3ae6-49fc-a08f-3a8161cb453b"),
                            Calle = "Carrera 7",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110171",
                            ColoniaBarrio = "Usaquén",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("b0bce11d-da14-4f97-89b9-66617a66bd44"),
                            Calle = "Avenida 68",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110841",
                            ColoniaBarrio = "Kennedy",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Acudiente.TelefonoAcudiente", b =>
                {
                    b.Property<Guid>("TelefonoAcudienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AcudienteId")
                        .HasColumnType("int");

                    b.Property<string>("Indicativo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TelefonoAcudienteId");

                    b.ToTable("TelefonoAcudiente");

                    b.HasData(
                        new
                        {
                            TelefonoAcudienteId = new Guid("8753de56-d120-43fb-a029-54b3623dbb45"),
                            AcudienteId = 1,
                            Indicativo = "+1",
                            Numero = -4135,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("a61b2473-b7e9-40f7-8c68-3af90fd20142"),
                            AcudienteId = 2,
                            Indicativo = "+1",
                            Numero = -6975,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("b29903f9-c17a-40da-a65d-d118f98178d5"),
                            AcudienteId = 3,
                            Indicativo = "+1",
                            Numero = -5357,
                            Tipo = "Fijo"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("f4292eba-ffa5-4cf8-8b71-e10c47c737e8"),
                            AcudienteId = 4,
                            Indicativo = "+1",
                            Numero = -5753,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("97c5d6ee-bb68-4c8e-95ca-6f1d0720637e"),
                            AcudienteId = 5,
                            Indicativo = "+1",
                            Numero = 911,
                            Tipo = "Emergencia"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("b763315c-7030-46e5-9ea5-0b7955add187"),
                            AcudienteId = 1,
                            Indicativo = "+1",
                            Numero = -667,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("00ab4a5c-7afe-4078-a65f-882aece76fa6"),
                            AcudienteId = 2,
                            Indicativo = "+1",
                            Numero = -1889,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("ba87b87e-4977-499c-a5c9-61daa8eb3aaa"),
                            AcudienteId = 3,
                            Indicativo = "+1",
                            Numero = -3111,
                            Tipo = "Fijo"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("4163e23d-7f0a-4518-bc6a-9050d3d7dba9"),
                            AcudienteId = 4,
                            Indicativo = "+1",
                            Numero = -4333,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("9479a994-fcbd-4a36-a8f0-a846252b95e2"),
                            AcudienteId = 5,
                            Indicativo = "+1",
                            Numero = -5555,
                            Tipo = "Emergencia"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_DepartamentoAcademico.Aulas", b =>
                {
                    b.Property<Guid>("AulaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacidad")
                        .HasColumnType("int");

                    b.Property<string>("EstadoAula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HorarioDisponibilidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreNumero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotasAdicionales")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrosIncidentesProblemas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsableAula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoAula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UltimaActualizacion")
                        .HasColumnType("datetime2");

                    b.HasKey("AulaId");

                    b.ToTable("Aulas");

                    b.HasData(
                        new
                        {
                            AulaId = new Guid("0d6c1b20-6a8e-4380-8419-e0a9db27ce34"),
                            Capacidad = 50,
                            EstadoAula = "Disponible",
                            HorarioDisponibilidad = "Lunes a Viernes, 08:00 AM - 06:00 PM",
                            NombreNumero = "Aula 101",
                            NotasAdicionales = "Equipada con proyector",
                            RegistrosIncidentesProblemas = "Ninguno",
                            ResponsableAula = "Profesor Responsable 1",
                            TipoAula = "Salón de Clases",
                            Ubicacion = "Edificio Principal",
                            UltimaActualizacion = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AulaId = new Guid("5c345d47-315f-4ebb-844e-705acc0b948c"),
                            Capacidad = 30,
                            EstadoAula = "Ocupado",
                            HorarioDisponibilidad = "Lunes a Viernes, 10:00 AM - 05:00 PM",
                            NombreNumero = "Aula 102",
                            NotasAdicionales = "Equipado con computadoras de última generación",
                            RegistrosIncidentesProblemas = "Reporte de fallo en una computadora",
                            ResponsableAula = "Profesor Responsable 2",
                            TipoAula = "Laboratorio de Informática",
                            Ubicacion = "Edificio de Ciencias",
                            UltimaActualizacion = new DateTime(2023, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AulaId = new Guid("742238e9-33d5-4502-9528-1c556672f798"),
                            Capacidad = 100,
                            EstadoAula = "Disponible",
                            HorarioDisponibilidad = "Disponible previa reserva",
                            NombreNumero = "Aula 103",
                            NotasAdicionales = "Equipada con proyector y sistema de sonido",
                            RegistrosIncidentesProblemas = "Ninguno",
                            ResponsableAula = "Personal de Eventos",
                            TipoAula = "Sala de Conferencias",
                            Ubicacion = "Edificio de Eventos",
                            UltimaActualizacion = new DateTime(2023, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AulaId = new Guid("b087f36c-bd8f-4032-9323-65000b54888c"),
                            Capacidad = 40,
                            EstadoAula = "En Mantenimiento",
                            HorarioDisponibilidad = "No disponible temporalmente",
                            NombreNumero = "Aula 104",
                            NotasAdicionales = "Mantenimiento programado",
                            RegistrosIncidentesProblemas = "Reporte de fugas de agua en el techo",
                            ResponsableAula = "Personal de Mantenimiento",
                            TipoAula = "Salón de Clases",
                            Ubicacion = "Edificio Principal",
                            UltimaActualizacion = new DateTime(2023, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AulaId = new Guid("4b124a6d-2170-43af-aab8-58cd5d7eb683"),
                            Capacidad = 10,
                            EstadoAula = "Disponible",
                            HorarioDisponibilidad = "Lunes a Domingo, 09:00 AM - 11:00 PM",
                            NombreNumero = "Aula 105",
                            NotasAdicionales = "Área de estudio tranquila",
                            RegistrosIncidentesProblemas = "Ninguno",
                            ResponsableAula = "Bibliotecario",
                            TipoAula = "Sala de Estudio",
                            Ubicacion = "Biblioteca",
                            UltimaActualizacion = new DateTime(2023, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Entities.Models.D_DepartamentoAcademico.Cursos", b =>
                {
                    b.Property<Guid>("CursoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AulasAsignadas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartamentoAcademico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaLimiteInscripcion")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetodosEnsenanza")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nivel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfesorAsignado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CursoId");

                    b.ToTable("Cursos");

                    b.HasData(
                        new
                        {
                            CursoId = new Guid("e1c305d1-4afe-480c-9eac-318bfaf14d06"),
                            AulasAsignadas = "Aula 101, Aula 102",
                            Codigo = "CS101",
                            DepartamentoAcademico = "Ciencias de la Computación",
                            Descripcion = "Introducción a la Programación",
                            FechaLimiteInscripcion = new DateTime(2023, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MetodosEnsenanza = "Clases magistrales, laboratorios prácticos",
                            Nivel = "Primer Semestre",
                            ProfesorAsignado = "Profesor 1"
                        },
                        new
                        {
                            CursoId = new Guid("c8d736ad-cd57-40c2-a02d-58f399392330"),
                            AulasAsignadas = "Classroom 201, Classroom 202",
                            Codigo = "ENG201",
                            DepartamentoAcademico = "English Department",
                            Descripcion = "Advanced English Composition",
                            FechaLimiteInscripcion = new DateTime(2023, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MetodosEnsenanza = "Lectures, writing assignments, group discussions",
                            Nivel = "Second Semester",
                            ProfesorAsignado = "Professor 2"
                        },
                        new
                        {
                            CursoId = new Guid("55c47303-fa58-496a-8b4d-d8dc40866962"),
                            AulasAsignadas = "Math Classroom 301",
                            Codigo = "MATH301",
                            DepartamentoAcademico = "Mathematics Department",
                            Descripcion = "Advanced Calculus",
                            FechaLimiteInscripcion = new DateTime(2023, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MetodosEnsenanza = "Lectures, problem sets, exams",
                            Nivel = "Third Semester",
                            ProfesorAsignado = "Professor 3"
                        },
                        new
                        {
                            CursoId = new Guid("354d434d-b2be-484b-a891-52ea0c9349f3"),
                            AulasAsignadas = "Chemistry Lab 201",
                            Codigo = "CHEM201",
                            DepartamentoAcademico = "Chemistry Department",
                            Descripcion = "Organic Chemistry",
                            FechaLimiteInscripcion = new DateTime(2023, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MetodosEnsenanza = "Lectures, laboratory experiments",
                            Nivel = "Second Semester",
                            ProfesorAsignado = "Professor 4"
                        },
                        new
                        {
                            CursoId = new Guid("15bf4971-90d6-4ed6-95fa-f9d1da9b6f2e"),
                            AulasAsignadas = "History Classroom 101",
                            Codigo = "HIST101",
                            DepartamentoAcademico = "History Department",
                            Descripcion = "Introduction to History",
                            FechaLimiteInscripcion = new DateTime(2023, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MetodosEnsenanza = "Lectures, discussions, research papers",
                            Nivel = "First Semester",
                            ProfesorAsignado = "Professor 5"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_DepartamentoAcademico.Horarios", b =>
                {
                    b.Property<Guid>("HorarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DiaSemana")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DuracionClaseMinutos")
                        .HasColumnType("int");

                    b.Property<string>("EstadoHorario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaFinClases")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicioClases")
                        .HasColumnType("datetime2");

                    b.Property<string>("GrupoSeccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("HoraFin")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HoraInicio")
                        .HasColumnType("time");

                    b.Property<string>("NotificacionCambioHorario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeriodoAcademico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfesorAsistente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalaAula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HorarioId");

                    b.ToTable("Horarios");

                    b.HasData(
                        new
                        {
                            HorarioId = new Guid("d1679085-709a-49d5-b38b-efb726497ff5"),
                            DiaSemana = "Lunes",
                            DuracionClaseMinutos = 120,
                            EstadoHorario = "Activo",
                            FechaFinClases = new DateTime(2023, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicioClases = new DateTime(2023, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrupoSeccion = "Grupo A",
                            HoraFin = new TimeSpan(0, 11, 0, 0, 0),
                            HoraInicio = new TimeSpan(0, 9, 0, 0, 0),
                            NotificacionCambioHorario = "No",
                            PeriodoAcademico = "Semestre de Otoño",
                            ProfesorAsistente = "Profesor Asistente 1",
                            SalaAula = "Aula 101"
                        },
                        new
                        {
                            HorarioId = new Guid("0559084f-a0b5-42a9-9795-7107d57c3a21"),
                            DiaSemana = "Martes",
                            DuracionClaseMinutos = 120,
                            EstadoHorario = "Activo",
                            FechaFinClases = new DateTime(2023, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicioClases = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrupoSeccion = "Grupo B",
                            HoraFin = new TimeSpan(0, 16, 0, 0, 0),
                            HoraInicio = new TimeSpan(0, 14, 0, 0, 0),
                            NotificacionCambioHorario = "Sí",
                            PeriodoAcademico = "Semestre de Primavera",
                            ProfesorAsistente = "Profesor Asistente 2",
                            SalaAula = "Aula 203"
                        },
                        new
                        {
                            HorarioId = new Guid("cf435652-1c86-44f2-ad18-a27a6e25e383"),
                            DiaSemana = "Miércoles",
                            DuracionClaseMinutos = 120,
                            EstadoHorario = "Activo",
                            FechaFinClases = new DateTime(2023, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicioClases = new DateTime(2023, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrupoSeccion = "Grupo C",
                            HoraFin = new TimeSpan(0, 13, 30, 0, 0),
                            HoraInicio = new TimeSpan(0, 11, 30, 0, 0),
                            NotificacionCambioHorario = "No",
                            PeriodoAcademico = "Semestre de Verano",
                            ProfesorAsistente = "Profesor Asistente 3",
                            SalaAula = "Aula 305"
                        },
                        new
                        {
                            HorarioId = new Guid("52e77762-81c1-47aa-ac76-f99b2e6c3894"),
                            DiaSemana = "Jueves",
                            DuracionClaseMinutos = 120,
                            EstadoHorario = "Activo",
                            FechaFinClases = new DateTime(2024, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicioClases = new DateTime(2023, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrupoSeccion = "Grupo D",
                            HoraFin = new TimeSpan(0, 18, 30, 0, 0),
                            HoraInicio = new TimeSpan(0, 16, 30, 0, 0),
                            NotificacionCambioHorario = "Sí",
                            PeriodoAcademico = "Semestre de Invierno",
                            ProfesorAsistente = "Profesor Asistente 4",
                            SalaAula = "Aula 401"
                        },
                        new
                        {
                            HorarioId = new Guid("15af04cc-7180-4ab9-a2f3-5c9dbe9ca920"),
                            DiaSemana = "Viernes",
                            DuracionClaseMinutos = 120,
                            EstadoHorario = "Activo",
                            FechaFinClases = new DateTime(2023, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicioClases = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrupoSeccion = "Grupo E",
                            HoraFin = new TimeSpan(0, 10, 0, 0, 0),
                            HoraInicio = new TimeSpan(0, 8, 0, 0, 0),
                            NotificacionCambioHorario = "No",
                            PeriodoAcademico = "Semestre de Primavera",
                            ProfesorAsistente = "Profesor Asistente 5",
                            SalaAula = "Aula 102"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_DepartamentoAcademico.Materias", b =>
                {
                    b.Property<Guid>("MateriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DepartamentoAcademico")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GrupoSeccionMateria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetodosEnsenanza")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModalidadEnsenanza")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nivel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotasAdicionales")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfesorAsignado")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MateriaId");

                    b.ToTable("Materias");

                    b.HasData(
                        new
                        {
                            MateriaId = new Guid("a88d0112-f1ac-40ca-9c93-44e9c3aebfd2"),
                            DepartamentoAcademico = "Departamento de Matemáticas",
                            Descripcion = "Curso de Matemáticas Avanzadas",
                            Estado = "En progreso",
                            GrupoSeccionMateria = "Grupo A",
                            MetodosEnsenanza = "Clases teóricas y prácticas",
                            ModalidadEnsenanza = "Presencial",
                            Nivel = "Avanzado",
                            Nombre = "Matemáticas",
                            NotasAdicionales = "Se requiere calculadora científica.",
                            ProfesorAsignado = "Profesor Matemático"
                        },
                        new
                        {
                            MateriaId = new Guid("d5ebc561-e015-4f51-bba1-2bee977d142e"),
                            DepartamentoAcademico = "Departamento de Historia",
                            Descripcion = "Curso de Historia Mundial",
                            Estado = "Inscripciones abiertas",
                            GrupoSeccionMateria = "Grupo B",
                            MetodosEnsenanza = "Conferencias y debates",
                            ModalidadEnsenanza = "Presencial",
                            Nivel = "Intermedio",
                            Nombre = "Historia",
                            NotasAdicionales = "Recomendado para estudiantes de Historia.",
                            ProfesorAsignado = "Profesor Historiador"
                        },
                        new
                        {
                            MateriaId = new Guid("a3ab3e46-d1a5-4133-942f-cecdb6bd045f"),
                            DepartamentoAcademico = "Departamento de Informática",
                            Descripcion = "Curso de Ciencias de la Computación",
                            Estado = "En progreso",
                            GrupoSeccionMateria = "Grupo C",
                            MetodosEnsenanza = "Clases virtuales y proyectos prácticos",
                            ModalidadEnsenanza = "En línea",
                            Nivel = "Avanzado",
                            Nombre = "Ciencias de la Computación",
                            NotasAdicionales = "Requiere acceso a una computadora.",
                            ProfesorAsignado = "Profesor de Informática"
                        },
                        new
                        {
                            MateriaId = new Guid("ea3d2dbd-6f5a-49cb-8af3-ef8092f08f5a"),
                            DepartamentoAcademico = "Departamento de Literatura",
                            Descripcion = "Curso de Literatura Universal",
                            Estado = "Inscripciones abiertas",
                            GrupoSeccionMateria = "Grupo D",
                            MetodosEnsenanza = "Lecturas y discusiones literarias",
                            ModalidadEnsenanza = "Presencial",
                            Nivel = "Intermedio",
                            Nombre = "Literatura",
                            NotasAdicionales = "Apto para amantes de la lectura.",
                            ProfesorAsignado = "Profesor Literario"
                        },
                        new
                        {
                            MateriaId = new Guid("f656069e-d3c0-4d64-b160-800f5d38bcdc"),
                            DepartamentoAcademico = "Departamento de Física",
                            Descripcion = "Curso de Física Avanzada",
                            Estado = "Completo",
                            GrupoSeccionMateria = "Grupo E",
                            MetodosEnsenanza = "Experimentos y clases teóricas",
                            ModalidadEnsenanza = "Presencial",
                            Nivel = "Avanzado",
                            Nombre = "Física",
                            NotasAdicionales = "Requiere conocimientos previos de física.",
                            ProfesorAsignado = "Profesor de Física"
                        },
                        new
                        {
                            MateriaId = new Guid("d014dff9-ac13-44ec-a65c-73970a00de12"),
                            DepartamentoAcademico = "Departamento de Economía",
                            Descripcion = "Curso de Economía Moderna",
                            Estado = "En progreso",
                            GrupoSeccionMateria = "Grupo F",
                            MetodosEnsenanza = "Clases virtuales y análisis económico",
                            ModalidadEnsenanza = "En línea",
                            Nivel = "Intermedio",
                            Nombre = "Economía",
                            NotasAdicionales = "Abordaremos temas financieros actuales.",
                            ProfesorAsignado = "Profesor Economista"
                        },
                        new
                        {
                            MateriaId = new Guid("330054f0-d1da-4ea2-9538-35a5d944525f"),
                            DepartamentoAcademico = "Departamento de Arte",
                            Descripcion = "Curso de Arte Contemporáneo",
                            Estado = "Inscripciones abiertas",
                            GrupoSeccionMateria = "Grupo G",
                            MetodosEnsenanza = "Prácticas artísticas y exposiciones",
                            ModalidadEnsenanza = "Presencial",
                            Nivel = "Intermedio",
                            Nombre = "Arte",
                            NotasAdicionales = "No se requiere experiencia previa en arte.",
                            ProfesorAsignado = "Profesor de Arte"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Estudiante.CandidatoEstudiante", b =>
                {
                    b.Property<Guid>("CandidatoEstudianteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("TipoPersona")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CandidatoEstudianteId");

                    b.ToTable("CandidatoEstudiantes");

                    b.HasData(
                        new
                        {
                            CandidatoEstudianteId = new Guid("6e0464cd-4c86-43a1-91fb-aab9d93ba449"),
                            Apellido = "Acuña",
                            FechaNacimiento = new DateTime(1995, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Axl",
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("aa178fa6-9e8c-4343-a4fd-3cfb0d541164"),
                            Apellido = "Castro",
                            FechaNacimiento = new DateTime(1990, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Juan",
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("7a02901d-e7ee-4587-b2ce-0c7499647297"),
                            Apellido = "Sánchez",
                            FechaNacimiento = new DateTime(1987, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Carlos",
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("e8605813-966f-4a3d-ac65-b1f0051a75e0"),
                            Apellido = "López",
                            FechaNacimiento = new DateTime(2000, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Laura",
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("b28eee30-363b-4bb8-a71e-32f27bb76ddb"),
                            Apellido = "Ramírez",
                            FechaNacimiento = new DateTime(1998, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Pedro",
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("ffa64eae-0e58-4639-b225-357844ddfcbe"),
                            Apellido = "Martínez",
                            FechaNacimiento = new DateTime(1993, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Ana",
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("511a3aff-e375-4340-8b56-39b4c5c9441c"),
                            Apellido = "Fernández",
                            FechaNacimiento = new DateTime(1989, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Roberto",
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("d4cfebf6-1d98-4e31-80f4-90296573bc8c"),
                            Apellido = "Gómez",
                            FechaNacimiento = new DateTime(1996, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Isabel",
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("5388abae-3ad5-433c-89c4-40315c83aad2"),
                            Apellido = "Díaz",
                            FechaNacimiento = new DateTime(1991, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Francisco",
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("21bfab7b-ec9e-4706-ae29-7fe27b75e0ba"),
                            Apellido = "Hernández",
                            FechaNacimiento = new DateTime(1994, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Sofía",
                            TipoPersona = "Estudiante"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Estudiante.Cupo", b =>
                {
                    b.Property<Guid>("CupoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CantidadDisponible")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duracion")
                        .HasColumnType("time");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ubicacion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CupoId");

                    b.ToTable("Cupo");

                    b.HasData(
                        new
                        {
                            CupoId = new Guid("8d3267a9-3dd6-4030-b8d7-48fd5987045c"),
                            CantidadDisponible = 10,
                            Descripcion = "Cupo para el evento principal",
                            Duracion = new TimeSpan(0, 2, 0, 0, 0),
                            Estado = true,
                            FechaFin = new DateTime(2023, 11, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(4388),
                            FechaInicio = new DateTime(2023, 10, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(4387),
                            Ubicacion = "Salón principal"
                        },
                        new
                        {
                            CupoId = new Guid("81dd02c5-4ed4-42c0-95b5-476188e3f9c1"),
                            CantidadDisponible = 5,
                            Descripcion = "Cupo para el taller de programación",
                            Duracion = new TimeSpan(0, 3, 0, 0, 0),
                            Estado = true,
                            FechaFin = new DateTime(2023, 12, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(4400),
                            FechaInicio = new DateTime(2023, 10, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(4400),
                            Ubicacion = "Aula 101"
                        },
                        new
                        {
                            CupoId = new Guid("6c0ad561-1296-45f5-9535-00272b4e700b"),
                            CantidadDisponible = 20,
                            Descripcion = "Cupo para el seminario de marketing",
                            Duracion = new TimeSpan(0, 4, 0, 0, 0),
                            Estado = true,
                            FechaFin = new DateTime(2024, 1, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(4403),
                            FechaInicio = new DateTime(2023, 10, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(4403),
                            Ubicacion = "Aula 102"
                        },
                        new
                        {
                            CupoId = new Guid("feaa0948-fdb0-44a7-913a-294c6efe9a5d"),
                            CantidadDisponible = 15,
                            Descripcion = "Cupo para el curso de diseño gráfico",
                            Duracion = new TimeSpan(0, 2, 0, 0, 0),
                            Estado = true,
                            FechaFin = new DateTime(2024, 2, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(4407),
                            FechaInicio = new DateTime(2023, 10, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(4407),
                            Ubicacion = "Aula 103"
                        },
                        new
                        {
                            CupoId = new Guid("157a7355-6694-4bfa-9af7-9d0c6478c196"),
                            CantidadDisponible = 30,
                            Descripcion = "Cupo para el evento de networking",
                            Duracion = new TimeSpan(0, 1, 0, 0, 0),
                            Estado = true,
                            FechaFin = new DateTime(2024, 3, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(4409),
                            FechaInicio = new DateTime(2023, 10, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(4409),
                            Ubicacion = "Aula 104"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Estudiante.EstudianteDocumentos", b =>
                {
                    b.Property<Guid>("EstudianteDocumentosId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidatoEstudianteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreDocumento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroDocumento")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tamaño")
                        .HasColumnType("int");

                    b.Property<string>("TipoDocumento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ubicacion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EstudianteDocumentosId");

                    b.ToTable("EstudianteDocumentos");

                    b.HasData(
                        new
                        {
                            EstudianteDocumentosId = new Guid("6a30c846-4b9d-4cf5-bb17-051a3e9d1b72"),
                            CandidatoEstudianteId = new Guid("c9d4c053-49b6-410c-bc78-2d54a999187f"),
                            Estado = true,
                            NombreDocumento = "Certificado de Nacimiento",
                            NumeroDocumento = 61464465,
                            Observaciones = "Ninguna",
                            Tamaño = 1024,
                            TipoDocumento = "Identificación",
                            Ubicacion = "ruta/al/documento1"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("2d54a999-187f-4a8c-99db-d17841e7938c"),
                            CandidatoEstudianteId = new Guid("3d490a70-94ce-4d15-9494-5248280c2ce3"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2023, 10, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(3487),
                            NombreDocumento = "Diploma",
                            NumeroDocumento = 987654,
                            Observaciones = "Logros académicos",
                            Tamaño = 2048,
                            TipoDocumento = "Educativo",
                            Ubicacion = "ruta/al/documento2"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("3e68515e-3a47-4a62-a8c7-9f12242d020e"),
                            CandidatoEstudianteId = new Guid("4f3657e5-5824-47b8-b4cd-6f49a3f4dbf1"),
                            Estado = false,
                            FechaActualizacion = new DateTime(2023, 10, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(3500),
                            NombreDocumento = "Certificado de Graduación",
                            NumeroDocumento = 123456,
                            Observaciones = "Graduación universitaria",
                            Tamaño = 1536,
                            TipoDocumento = "Educativo",
                            Ubicacion = "ruta/al/documento3"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("4a303cce-8c0e-4ae7-89c1-067d0b7741b6"),
                            CandidatoEstudianteId = new Guid("3e68515e-3a47-4a62-a8c7-9f12242d020e"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2023, 10, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(3503),
                            NombreDocumento = "Certificado de Matrícula",
                            NumeroDocumento = 789012,
                            Observaciones = "Matrícula escolar",
                            Tamaño = 8192,
                            TipoDocumento = "Educativo",
                            Ubicacion = "ruta/al/documento4"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("5f78d0e1-579e-4dfc-82a1-92010b4191d3"),
                            CandidatoEstudianteId = new Guid("31eb541a-9419-4eac-bf1b-0289a6c6f6f0"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2023, 10, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(3506),
                            NombreDocumento = "Cédula de Identidad",
                            NumeroDocumento = 555555,
                            Observaciones = "Documento oficial",
                            Tamaño = 4096,
                            TipoDocumento = "Identificación",
                            Ubicacion = "ruta/al/documento5"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("f38f6b1a-86e9-4d9d-8a7a-62f17e6f1ba2"),
                            CandidatoEstudianteId = new Guid("7f255218-f8e0-45a9-9807-12e1bcfd438c"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2023, 10, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(3509),
                            NombreDocumento = "Carné de Estudiante",
                            NumeroDocumento = 7890123,
                            Observaciones = "Carné escolar",
                            Tamaño = 3072,
                            TipoDocumento = "Identificación",
                            Ubicacion = "ruta/al/documento6"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("7e15d9a4-98cb-4d14-9a35-862f8c202725"),
                            CandidatoEstudianteId = new Guid("bb9b0679-4f04-4ac4-9ddc-5c3e50e81298"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2023, 10, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(3512),
                            NombreDocumento = "Boleta de Calificaciones",
                            NumeroDocumento = 9876543,
                            Observaciones = "Registro académico",
                            Tamaño = 5120,
                            TipoDocumento = "Educativo",
                            Ubicacion = "ruta/al/documento7"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("8f4a67c2-fd5e-4316-8c50-7249f159d0f1"),
                            CandidatoEstudianteId = new Guid("a6509bea-688e-43b5-a870-6ee461ccf601"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2023, 10, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(3514),
                            NombreDocumento = "Pasaporte",
                            NumeroDocumento = 1234567,
                            Observaciones = "Documento de viaje",
                            Tamaño = 4096,
                            TipoDocumento = "Identificación",
                            Ubicacion = "ruta/al/documento8"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("9b9d6d8f-72f0-4f0a-8e18-1e75b0182e3f"),
                            CandidatoEstudianteId = new Guid("db9fcac5-8654-45c3-87c7-8b5e13e9e6c2"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2023, 10, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(3516),
                            NombreDocumento = "Certificado Médico",
                            NumeroDocumento = 543210,
                            Observaciones = "Informe médico",
                            Tamaño = 2048,
                            TipoDocumento = "Salud",
                            Ubicacion = "ruta/al/documento9"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("10a5e754-1570-4be0-8650-2c53d7cfb4d3"),
                            CandidatoEstudianteId = new Guid("b3b5a5a7-5b82-4f76-98c1-654589db8f61"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2023, 10, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(3518),
                            NombreDocumento = "Fotografía del Estudiante",
                            NumeroDocumento = 1111111,
                            Observaciones = "Foto de perfil",
                            Tamaño = 1024,
                            TipoDocumento = "Identificación",
                            Ubicacion = "ruta/al/documento10"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Notas.Asistencia", b =>
                {
                    b.Property<int>("AsistenciaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AsistenciaId"));

                    b.Property<bool>("Asistio")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaHoraAsistencia")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreAsistente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoEvento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UbicacionEvento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AsistenciaId");

                    b.ToTable("Asistencia");

                    b.HasData(
                        new
                        {
                            AsistenciaId = 1,
                            Asistio = true,
                            FechaHoraAsistencia = new DateTime(2023, 10, 3, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "Juan Pérez",
                            Notas = "Asistió puntualmente.",
                            TipoEvento = "Conferencia",
                            UbicacionEvento = "Salón A"
                        },
                        new
                        {
                            AsistenciaId = 2,
                            Asistio = false,
                            FechaHoraAsistencia = new DateTime(2023, 10, 4, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "María Rodríguez",
                            Notas = "No pudo asistir debido a un compromiso previo.",
                            TipoEvento = "Reunión",
                            UbicacionEvento = "Sala de juntas"
                        },
                        new
                        {
                            AsistenciaId = 3,
                            Asistio = true,
                            FechaHoraAsistencia = new DateTime(2023, 10, 5, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "Carlos González",
                            Notas = "Participó activamente en el taller.",
                            TipoEvento = "Taller",
                            UbicacionEvento = "Aula 101"
                        },
                        new
                        {
                            AsistenciaId = 4,
                            Asistio = true,
                            FechaHoraAsistencia = new DateTime(2023, 10, 6, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "Ana López",
                            Notas = "Tomó notas detalladas durante la conferencia.",
                            TipoEvento = "Conferencia",
                            UbicacionEvento = "Salón B"
                        },
                        new
                        {
                            AsistenciaId = 5,
                            Asistio = true,
                            FechaHoraAsistencia = new DateTime(2023, 10, 7, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "Pedro Ramírez",
                            Notas = "Participó en la discusión de temas importantes.",
                            TipoEvento = "Reunión",
                            UbicacionEvento = "Sala de conferencias"
                        },
                        new
                        {
                            AsistenciaId = 6,
                            Asistio = true,
                            FechaHoraAsistencia = new DateTime(2023, 10, 8, 11, 45, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "Laura Martínez",
                            Notas = "Hizo preguntas interesantes durante el seminario.",
                            TipoEvento = "Seminario",
                            UbicacionEvento = "Auditorio"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Notas.Estadisticas", b =>
                {
                    b.Property<int>("EstadisticaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstadisticaId"));

                    b.Property<int>("AñoEscolar")
                        .HasColumnType("int");

                    b.Property<int>("CantidadExamenes")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Materia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("NotaMaxima")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NotaMinima")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NotaPromedio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PeriodoEscolar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EstadisticaId");

                    b.ToTable("Estadisticas");

                    b.HasData(
                        new
                        {
                            EstadisticaId = 1,
                            AñoEscolar = 2023,
                            CantidadExamenes = 5,
                            FechaRegistro = new DateTime(2023, 10, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(6417),
                            Materia = "Matemáticas",
                            NotaMaxima = 9.0m,
                            NotaMinima = 7.5m,
                            NotaPromedio = 8.5m,
                            PeriodoEscolar = "Primer Trimestre"
                        },
                        new
                        {
                            EstadisticaId = 2,
                            AñoEscolar = 2023,
                            CantidadExamenes = 4,
                            FechaRegistro = new DateTime(2023, 10, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(6421),
                            Materia = "Ciencias",
                            NotaMaxima = 8.5m,
                            NotaMinima = 6.5m,
                            NotaPromedio = 7.8m,
                            PeriodoEscolar = "Segundo Trimestre"
                        },
                        new
                        {
                            EstadisticaId = 3,
                            AñoEscolar = 2023,
                            CantidadExamenes = 3,
                            FechaRegistro = new DateTime(2023, 10, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(6422),
                            Materia = "Historia",
                            NotaMaxima = 9.5m,
                            NotaMinima = 8.5m,
                            NotaPromedio = 9.2m,
                            PeriodoEscolar = "Tercer Trimestre"
                        },
                        new
                        {
                            EstadisticaId = 4,
                            AñoEscolar = 2023,
                            CantidadExamenes = 5,
                            FechaRegistro = new DateTime(2023, 10, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(6425),
                            Materia = "Lenguaje",
                            NotaMaxima = 8.0m,
                            NotaMinima = 6.0m,
                            NotaPromedio = 7.2m,
                            PeriodoEscolar = "Primer Semestre"
                        },
                        new
                        {
                            EstadisticaId = 5,
                            AñoEscolar = 2023,
                            CantidadExamenes = 2,
                            FechaRegistro = new DateTime(2023, 10, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(6426),
                            Materia = "Arte",
                            NotaMaxima = 9.0m,
                            NotaMinima = 8.0m,
                            NotaPromedio = 8.7m,
                            PeriodoEscolar = "Segundo Semestre"
                        },
                        new
                        {
                            EstadisticaId = 6,
                            AñoEscolar = 2023,
                            CantidadExamenes = 3,
                            FechaRegistro = new DateTime(2023, 10, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(6428),
                            Materia = "Educación Física",
                            NotaMaxima = 10.0m,
                            NotaMinima = 9.0m,
                            NotaPromedio = 9.5m,
                            PeriodoEscolar = "Trimestre Extra"
                        });
                });

            modelBuilder.Entity("Entities.Models.Matricula", b =>
                {
                    b.Property<Guid>("MatriculaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoriaMatricula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comentarios")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoMatricula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaMatricula")
                        .HasColumnType("datetime2");

                    b.Property<string>("InformacionPlanEstudios")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PeriodoAcademico")
                        .HasColumnType("int");

                    b.Property<string>("RegistroCambios")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoMatricula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MatriculaId");

                    b.ToTable("Matricula");

                    b.HasData(
                        new
                        {
                            MatriculaId = new Guid("1f05c8f3-ff1f-401a-8f59-943ce466af10"),
                            CategoriaMatricula = "Estudiante de Tiempo Completo",
                            Comentarios = "Comentario sobre la matrícula 1",
                            EstadoMatricula = "Activa",
                            FechaMatricula = new DateTime(2023, 10, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(5019),
                            InformacionPlanEstudios = "Plan de estudios 2023",
                            PeriodoAcademico = 2023,
                            RegistroCambios = "Registro de cambios 1",
                            TipoMatricula = "Matrícula Regular"
                        },
                        new
                        {
                            MatriculaId = new Guid("e8536113-87eb-4d14-bee2-baad66626ce4"),
                            CategoriaMatricula = "Estudiante de Tiempo Parcial",
                            Comentarios = "Comentario sobre la matrícula 2",
                            EstadoMatricula = "Pendiente",
                            FechaMatricula = new DateTime(2023, 11, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(5023),
                            InformacionPlanEstudios = "Plan de estudios 2023",
                            PeriodoAcademico = 2023,
                            RegistroCambios = "Registro de cambios 2",
                            TipoMatricula = "Matrícula Parcial"
                        },
                        new
                        {
                            MatriculaId = new Guid("6dd49244-7f2c-4061-9017-78eecc43d576"),
                            CategoriaMatricula = "Estudiante Internacional",
                            Comentarios = "Comentario sobre la matrícula 3",
                            EstadoMatricula = "Cancelada",
                            FechaMatricula = new DateTime(2023, 12, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(5026),
                            InformacionPlanEstudios = "Plan de estudios 2023",
                            PeriodoAcademico = 2023,
                            RegistroCambios = "Registro de cambios 3",
                            TipoMatricula = "Matrícula Regular"
                        },
                        new
                        {
                            MatriculaId = new Guid("9342a551-e09a-438c-bbb1-5e4c820bdea0"),
                            CategoriaMatricula = "Estudiante de Tiempo Completo",
                            Comentarios = "Comentario sobre la matrícula 4",
                            EstadoMatricula = "Activa",
                            FechaMatricula = new DateTime(2024, 1, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(5028),
                            InformacionPlanEstudios = "Plan de estudios 2023",
                            PeriodoAcademico = 2023,
                            RegistroCambios = "Registro de cambios 4",
                            TipoMatricula = "Matrícula Regular"
                        },
                        new
                        {
                            MatriculaId = new Guid("81c36e55-be49-4269-8a01-25566e6752cc"),
                            CategoriaMatricula = "Estudiante de Tiempo Completo",
                            Comentarios = "Comentario sobre la matrícula 5",
                            EstadoMatricula = "Activa",
                            FechaMatricula = new DateTime(2024, 2, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(5031),
                            InformacionPlanEstudios = "Plan de estudios 2023",
                            PeriodoAcademico = 2023,
                            RegistroCambios = "Registro de cambios 5",
                            TipoMatricula = "Matrícula Regular"
                        });
                });

            modelBuilder.Entity("Entities.Models.PreMatricula", b =>
                {
                    b.Property<Guid>("PreMatriculaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EstadoPreMatricula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GradoONivel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequisitosDocumentacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Turno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PreMatriculaId");

                    b.ToTable("PreMatricula");

                    b.HasData(
                        new
                        {
                            PreMatriculaId = new Guid("9c69c7a4-4119-46af-9625-442d80275d62"),
                            EstadoPreMatricula = "Pendiente",
                            GradoONivel = "Quinto de Primaria",
                            Observaciones = "Estudiante con requerimientos especiales.",
                            RequisitosDocumentacion = "NoCumplio",
                            Turno = "Mañana"
                        },
                        new
                        {
                            PreMatriculaId = new Guid("849b84be-a78a-49d9-b2ff-dff7a996c4c2"),
                            EstadoPreMatricula = "Activa",
                            GradoONivel = "Séptimo de Secundaria",
                            Observaciones = "Estudiante de transferencia.",
                            RequisitosDocumentacion = "SiCumplio",
                            Turno = "Tarde"
                        },
                        new
                        {
                            PreMatriculaId = new Guid("6fa3cf77-5ddb-48d1-a36f-de6bc10df9d2"),
                            EstadoPreMatricula = "Pendiente",
                            GradoONivel = "Tercero de Primaria",
                            Observaciones = "Estudiante extranjero.",
                            RequisitosDocumentacion = "SiCumplio",
                            Turno = "Mañana"
                        },
                        new
                        {
                            PreMatriculaId = new Guid("f16c893f-6883-4bb0-812c-6b2bc52fb811"),
                            EstadoPreMatricula = "Activa",
                            GradoONivel = "Cuarto de Secundaria",
                            Observaciones = "Estudiante con beca deportiva.",
                            RequisitosDocumentacion = "SiCumplio",
                            Turno = "Tarde"
                        },
                        new
                        {
                            PreMatriculaId = new Guid("bd4bcec5-e4b6-498a-8abb-bd3fea026847"),
                            EstadoPreMatricula = "Activa",
                            GradoONivel = "Segundo de Primaria",
                            Observaciones = "Estudiante con discapacidad visual.",
                            RequisitosDocumentacion = "SiCumplio",
                            Turno = "Mañana"
                        },
                        new
                        {
                            PreMatriculaId = new Guid("c96d61a7-5793-4c03-ac45-fd4a6017a209"),
                            EstadoPreMatricula = "Pendiente",
                            GradoONivel = "Octavo de Secundaria",
                            Observaciones = "Estudiante sin observaciones adicionales.",
                            RequisitosDocumentacion = "Si cumplio",
                            Turno = "Tarde"
                        });
                });

            modelBuilder.Entity("Entities.Models.RespuestaCupo", b =>
                {
                    b.Property<Guid>("RespuestaCupoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("DuracionRespuesta")
                        .HasColumnType("time");

                    b.Property<string>("EstadoRespuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaRespuesta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaVencimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("MensajeRespuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prioridad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoRespuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioRespuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RespuestaCupoId");

                    b.ToTable("RespuestaCupo");

                    b.HasData(
                        new
                        {
                            RespuestaCupoId = new Guid("23a24daa-c0cd-48c0-aeb4-0e7255a791ae"),
                            DuracionRespuesta = new TimeSpan(30, 0, 0, 0, 0),
                            EstadoRespuesta = "Aceptada",
                            FechaRespuesta = new DateTime(2023, 10, 4, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(4604),
                            FechaVencimiento = new DateTime(2023, 11, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(4609),
                            MensajeRespuesta = "Respuesta 1",
                            Prioridad = "Alta",
                            TipoRespuesta = "Aceptación",
                            UsuarioRespuesta = "Usuario1"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("6608af56-9427-4619-9b53-c82bb458349c"),
                            DuracionRespuesta = new TimeSpan(45, 0, 0, 0, 0),
                            EstadoRespuesta = "Rechazada",
                            FechaRespuesta = new DateTime(2023, 10, 5, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(4617),
                            FechaVencimiento = new DateTime(2023, 12, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(4617),
                            MensajeRespuesta = "Respuesta 2",
                            Prioridad = "Media",
                            TipoRespuesta = "Rechazo",
                            UsuarioRespuesta = "Usuario2"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("5cf91016-1ecc-4dc3-a1d4-15818ce6d6b7"),
                            DuracionRespuesta = new TimeSpan(60, 0, 0, 0, 0),
                            EstadoRespuesta = "Pendiente",
                            FechaRespuesta = new DateTime(2023, 10, 6, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(4619),
                            FechaVencimiento = new DateTime(2024, 1, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(4620),
                            MensajeRespuesta = "Respuesta 3",
                            Prioridad = "Baja",
                            TipoRespuesta = "Pendiente",
                            UsuarioRespuesta = "Usuario3"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("8e78c095-1475-4ef3-9c79-50c599564ab1"),
                            DuracionRespuesta = new TimeSpan(30, 0, 0, 0, 0),
                            EstadoRespuesta = "Aceptada",
                            FechaRespuesta = new DateTime(2023, 10, 7, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(4622),
                            FechaVencimiento = new DateTime(2024, 2, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(4622),
                            MensajeRespuesta = "Respuesta 4",
                            Prioridad = "Alta",
                            TipoRespuesta = "Aceptación",
                            UsuarioRespuesta = "Usuario4"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("8134c661-4700-4b27-bcfd-d4285658f74b"),
                            DuracionRespuesta = new TimeSpan(45, 0, 0, 0, 0),
                            EstadoRespuesta = "Rechazada",
                            FechaRespuesta = new DateTime(2023, 10, 8, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(4624),
                            FechaVencimiento = new DateTime(2024, 3, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(4625),
                            MensajeRespuesta = "Respuesta 5",
                            Prioridad = "Media",
                            TipoRespuesta = "Rechazo",
                            UsuarioRespuesta = "Usuario5"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("71858ef0-8c88-45fc-bddb-92f098e40fc4"),
                            DuracionRespuesta = new TimeSpan(30, 0, 0, 0, 0),
                            EstadoRespuesta = "Aceptada",
                            FechaRespuesta = new DateTime(2023, 10, 9, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(4627),
                            FechaVencimiento = new DateTime(2024, 4, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(4627),
                            MensajeRespuesta = "Respuesta 6",
                            Prioridad = "Alta",
                            TipoRespuesta = "Aceptación",
                            UsuarioRespuesta = "Usuario6"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("9eac1b0f-5ef3-4723-a545-400f8ce6258f"),
                            DuracionRespuesta = new TimeSpan(45, 0, 0, 0, 0),
                            EstadoRespuesta = "Rechazada",
                            FechaRespuesta = new DateTime(2023, 10, 10, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(4631),
                            FechaVencimiento = new DateTime(2024, 5, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(4631),
                            MensajeRespuesta = "Respuesta 7",
                            Prioridad = "Media",
                            TipoRespuesta = "Rechazo",
                            UsuarioRespuesta = "Usuario7"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("f9c0519a-c2d1-4b59-9f2e-d0db5294524d"),
                            DuracionRespuesta = new TimeSpan(60, 0, 0, 0, 0),
                            EstadoRespuesta = "Pendiente",
                            FechaRespuesta = new DateTime(2023, 10, 11, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(4633),
                            FechaVencimiento = new DateTime(2024, 6, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(4634),
                            MensajeRespuesta = "Respuesta 8",
                            Prioridad = "Baja",
                            TipoRespuesta = "Pendiente",
                            UsuarioRespuesta = "Usuario8"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("66eb2827-548a-42ca-acc8-bd284ed76036"),
                            DuracionRespuesta = new TimeSpan(30, 0, 0, 0, 0),
                            EstadoRespuesta = "Aceptada",
                            FechaRespuesta = new DateTime(2023, 10, 12, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(4635),
                            FechaVencimiento = new DateTime(2024, 7, 3, 21, 55, 47, 409, DateTimeKind.Local).AddTicks(4636),
                            MensajeRespuesta = "Respuesta 9",
                            Prioridad = "Alta",
                            TipoRespuesta = "Aceptación",
                            UsuarioRespuesta = "Usuario9"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
